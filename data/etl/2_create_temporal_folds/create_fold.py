# +
#!/usr/bin/python
# import packages

from sqlalchemy import create_engine

# -

# Connect to db
db_string = 'postgresql://postgres:123456@localhost:5432/donaronline_boosted'
con = create_engine(db_string)


# Function 
def create_fold(snapshot_beginning,snapshot_end,snapshot_end_target_period, fold_number ):
    """
    Function that creates tables with data for different time snapshots
    
    Args:
        snapshot_beginning: Begin date for the training period
        snapshot_end: End of training period / begining of test period
        snapshot_end_target_period: End of test period
        fold_number: Identification of number of the created fold
        
    Returns:
            A table in folds schema in Postgres DB.
    
    """
    if fold_number == 0:
        query_schema_folds = f"""
        DROP SCHEMA IF EXISTS FOLDS CASCADE;
        CREATE SCHEMA FOLDS;"""
        
        con.execute(query_schema_folds)
    else:
        pass
    
    query_schema_temporal = f"""
    DROP SCHEMA IF EXISTS TEMPORAL CASCADE;
    CREATE SCHEMA TEMPORAL;
    """
    con.execute(query_schema_temporal)

    query_inicial = f"""
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_DONATIONS;
    CREATE TABLE TEMPORAL.Z_BASE_DONATIONS AS
    SELECT 
    	*
    FROM
    	RAW.DONATIONS
    WHERE 
    	CREATED_AT >=  to_timestamp('{snapshot_beginning}', 'YYYY-MM-DD hh24:mi:ss')
    	AND CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')
    	AND MONTHLY = 1;
    
    ALTER TABLE TEMPORAL.Z_BASE_DONATIONS ADD PRIMARY KEY(ID);
    
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_CAMPAIGNS;
    CREATE TABLE TEMPORAL.Z_BASE_CAMPAIGNS AS
    SELECT 
    	*
    FROM
    	RAW.CAMPAIGNS
    WHERE CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss');
    
    ALTER TABLE TEMPORAL.Z_BASE_CAMPAIGNS ADD PRIMARY KEY(ID);
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_DONORS;
    CREATE TABLE TEMPORAL.Z_BASE_DONORS AS
    SELECT 
    	*
    FROM
    	RAW.DONORS
    WHERE 
    	CREATED_AT >= to_timestamp('{snapshot_beginning}', 'YYYY-MM-DD hh24:mi:ss')  AND CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') ;
    
    ALTER TABLE TEMPORAL.Z_BASE_DONORS ADD PRIMARY KEY(ID);
    	
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_ORGANIZATIONS;
    CREATE TABLE TEMPORAL.Z_BASE_ORGANIZATIONS AS
    SELECT 
    	*
    FROM
    	RAW.ORGANIZATIONS
    WHERE CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')
    	AND COUNTRY = 'AR'
    	AND ENABLED_AT IS NOT NULL;
    
    
    ALTER TABLE TEMPORAL.Z_BASE_ORGANIZATIONS ADD PRIMARY KEY(ID);
    
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_SHARES;
    CREATE TABLE TEMPORAL.Z_BASE_SHARES AS
    SELECT 
    	*
    FROM
    	CLEANED.SHARES
    WHERE CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') ;
    
    ALTER TABLE TEMPORAL.Z_BASE_SHARES ADD PRIMARY KEY(DONOR_ID);
    
    """
    con.execute(query_inicial)
    
    query_analytics = f"""
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL;
    CREATE TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL  AS
    SELECT
    	A.CAMPAIGN_ID,
    	SUM(CASE WHEN ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_VIEWS,
    	SUM(CASE WHEN ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_DONATIONS,
    	SUM(CASE WHEN ACTION = 'VIEW' THEN 1 ELSE 0 END) / CASE WHEN COUNT(ACTION) = 0 THEN NULL ELSE COUNT(ACTION) END  ANALYTICS_RATIO_VIEWS,
    	SUM(CASE WHEN ACTION = 'DONATION' THEN 1 ELSE 0 END) / CASE WHEN COUNT(ACTION) = 0 THEN NULL ELSE COUNT(ACTION) END ANALYTICS_RATIO_DONATION,
    	COUNT(DISTINCT REFERRAL_CATEGORY) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_FB,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_FB,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_GOOGLE,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_GOOGLE,
    	SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_NULL,
    	SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_NULL,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'DONARONLINE' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_DONARONLINE,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'DONARONLINE' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_DONARONLINE,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'URL_ONG' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_URL_ONG,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'URL_ONG' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_URL_ONG,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'OTRO' AND ACTION = 'VIEW' THEN 1 ELSE 0 END) ANALYTICS_CAMP_VIEW_OTRO,
    	SUM(CASE WHEN REFERRAL_CATEGORY = 'OTRO' AND ACTION = 'DONATION' THEN 1 ELSE 0 END) ANALYTICS_CAMP_DONATION_OTRO
    FROM 
    	CLEANED.ANALYTICS_CAT_REFERRAL A
    WHERE 
    	CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') 
    GROUP BY 
    	A.CAMPAIGN_ID;
    
    
    ALTER TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL ADD PRIMARY KEY(CAMPAIGN_ID);
    
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_MONTHLY;
    CREATE TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_MONTHLY  AS	
    SELECT
    CAMPAIGN_ID,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '30 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '60 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_1,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '90 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_2,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '120 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_3,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '150 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_4,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '180 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_5,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '210 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_6,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '240 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_7,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '270 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_8,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '300 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_9,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '330 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_10,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '360 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_11,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'FACEBOOK' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '390 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_FB_T_12,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '30 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '60 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_1,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '90 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_2,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '120 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_3,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '150 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_4,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '180 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_5,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '210 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_6,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '240 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_7,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '270 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_8,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '300 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_9,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '330 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_10,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '360 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_11,
       SUM(CASE WHEN REFERRAL_CATEGORY = 'GOOGLE' AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '390 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_GOOGLE_T_12,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '30 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '60 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_1,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '90 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_2,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '120 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_3,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '150 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_4,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '180 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_5,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '210 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_6,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '240 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_7,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '270 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_8,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '300 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_9,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '330 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_10,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '360 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_11,
       SUM(CASE WHEN REFERRAL_CATEGORY IS NULL AND ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '390 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_view_NULL_T_12,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '30 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '60 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_1,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '90 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_2,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '120 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_3,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '150 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_4,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '180 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_5,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '210 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_6,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '240 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_7,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '270 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_8,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '300 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_9,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '330 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_10,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '360 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_11,
       COUNT(DISTINCT(CASE WHEN ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '390 days' THEN REFERRAL_CATEGORY ELSE  NULL END )) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_12,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '30 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '60 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_1,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '90 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_2,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '120 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_3,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '150 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_4,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '180 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_5,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '210 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_6,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '240 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_7,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '270 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_8,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '300 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_9,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '330 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_10,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '360 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_11,
       SUM(CASE WHEN ACTION = 'view' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '390 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_viewS_T_12,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '30 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '60 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_1,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '90 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_2,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '120 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_3,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '150 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_4,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '180 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_5,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '210 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_6,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '240 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_7,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '270 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_8,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '300 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_9,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '330 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_10,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '360 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_11,
       SUM(CASE WHEN ACTION = 'donation' AND ( to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - CREATED_AT) <= INTERVAL '390 days' THEN 1 ELSE 0 END) ANALYTICS_CAMP_Q_donationS_T_12
    FROM CLEANED.ANALYTICS_CAT_REFERRAL
    	WHERE  CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')  
    	GROUP BY  1;
    
    ALTER TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_MONTHLY  ADD PRIMARY KEY(CAMPAIGN_ID);
    
    
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_AGGREGATES;
    CREATE TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_AGGREGATES AS	
    SELECT		
    CAMPAIGN_ID,
    ROUND((ANALYTICS_CAMP_VIEW_FB_T_1 + ANALYTICS_CAMP_VIEW_FB_T_2 + ANALYTICS_CAMP_VIEW_FB_T_3)/ 3,0) ANALYTICS_CAMP_VIEW_FB_AVG_QUARTER,
    ROUND((ANALYTICS_CAMP_VIEW_FB_T_1 + ANALYTICS_CAMP_VIEW_FB_T_2 + ANALYTICS_CAMP_VIEW_FB_T_3 + ANALYTICS_CAMP_VIEW_FB_T_4 + ANALYTICS_CAMP_VIEW_FB_T_5 + ANALYTICS_CAMP_VIEW_FB_T_6)/6,0)ANALYTICS_CAMP_VIEW_FB_AVG_SEMESTER,
    ROUND((ANALYTICS_CAMP_VIEW_FB_T_1 + ANALYTICS_CAMP_VIEW_FB_T_2 + ANALYTICS_CAMP_VIEW_FB_T_3 + ANALYTICS_CAMP_VIEW_FB_T_4 + ANALYTICS_CAMP_VIEW_FB_T_5 + ANALYTICS_CAMP_VIEW_FB_T_6 + ANALYTICS_CAMP_VIEW_FB_T_7 + ANALYTICS_CAMP_VIEW_FB_T_8 + ANALYTICS_CAMP_VIEW_FB_T_9 + ANALYTICS_CAMP_VIEW_FB_T_10 + ANALYTICS_CAMP_VIEW_FB_T_11 + ANALYTICS_CAMP_VIEW_FB_T_12)/ 12,0) ANALYTICS_CAMP_VIEW_FB_AVG_YEAR,
    ROUND((ANALYTICS_CAMP_VIEW_GOOGLE_T_1 + ANALYTICS_CAMP_VIEW_GOOGLE_T_2 + ANALYTICS_CAMP_VIEW_GOOGLE_T_3)/ 3,0) ANALYTICS_CAMP_VIEW_GOOGLE_AVG_QUARTER,
    ROUND((ANALYTICS_CAMP_VIEW_GOOGLE_T_1 + ANALYTICS_CAMP_VIEW_GOOGLE_T_2 + ANALYTICS_CAMP_VIEW_GOOGLE_T_3 + ANALYTICS_CAMP_VIEW_GOOGLE_T_4 + ANALYTICS_CAMP_VIEW_GOOGLE_T_5 + ANALYTICS_CAMP_VIEW_GOOGLE_T_6)/ 6,0) ANALYTICS_CAMP_VIEW_GOOGLE_AVG_SEMESTER,
    ROUND((ANALYTICS_CAMP_VIEW_GOOGLE_T_1 + ANALYTICS_CAMP_VIEW_GOOGLE_T_2 + ANALYTICS_CAMP_VIEW_GOOGLE_T_3 + ANALYTICS_CAMP_VIEW_GOOGLE_T_4 + ANALYTICS_CAMP_VIEW_GOOGLE_T_5 + ANALYTICS_CAMP_VIEW_GOOGLE_T_6 + ANALYTICS_CAMP_VIEW_GOOGLE_T_7 + ANALYTICS_CAMP_VIEW_GOOGLE_T_8 + ANALYTICS_CAMP_VIEW_GOOGLE_T_9 + ANALYTICS_CAMP_VIEW_GOOGLE_T_10 + ANALYTICS_CAMP_VIEW_GOOGLE_T_11 + ANALYTICS_CAMP_VIEW_GOOGLE_T_12)/ 12,0) ANALYTICS_CAMP_VIEW_GOOGLE_AVG_YEAR,
    ROUND((ANALYTICS_CAMP_VIEW_NULL_T_1 + ANALYTICS_CAMP_VIEW_NULL_T_2 + ANALYTICS_CAMP_VIEW_NULL_T_3)/ 3,0) ANALYTICS_CAMP_VIEW_NULL_AVG_QUARTER,
    ROUND((ANALYTICS_CAMP_VIEW_NULL_T_1 + ANALYTICS_CAMP_VIEW_NULL_T_2 + ANALYTICS_CAMP_VIEW_NULL_T_3 + ANALYTICS_CAMP_VIEW_NULL_T_4 + ANALYTICS_CAMP_VIEW_NULL_T_5 + ANALYTICS_CAMP_VIEW_NULL_T_6)/ 6,0) ANALYTICS_CAMP_VIEW_NULL_AVG_SEMESTER,
    ROUND((ANALYTICS_CAMP_VIEW_NULL_T_1 + ANALYTICS_CAMP_VIEW_NULL_T_2 + ANALYTICS_CAMP_VIEW_NULL_T_3 + ANALYTICS_CAMP_VIEW_NULL_T_4 + ANALYTICS_CAMP_VIEW_NULL_T_5 + ANALYTICS_CAMP_VIEW_NULL_T_6 + ANALYTICS_CAMP_VIEW_NULL_T_7 + ANALYTICS_CAMP_VIEW_NULL_T_8 + ANALYTICS_CAMP_VIEW_NULL_T_9 + ANALYTICS_CAMP_VIEW_NULL_T_10 + ANALYTICS_CAMP_VIEW_NULL_T_11 + ANALYTICS_CAMP_VIEW_NULL_T_12)/ 12,0) ANALYTICS_CAMP_VIEW_NULL_AVG_YEAR,
    ROUND((ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_1 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_2 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_3)/ 3,0) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_QUARTER,
    ROUND((ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_1 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_2 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_3 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_4 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_5 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_6)/ 6,0) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_SEMESTER,
    ROUND((ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_1 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_2 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_3 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_4 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_5 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_6 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_7 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_8 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_9 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_10 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_11 + ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_12)/ 12,0) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_YEAR,
    ROUND((ANALYTICS_CAMP_Q_VIEWS_T_1 + ANALYTICS_CAMP_Q_VIEWS_T_2 + ANALYTICS_CAMP_Q_VIEWS_T_3)/ 3,0) ANALYTICS_CAMP_Q_VIEWS_AVG_QUARTER,
    ROUND((ANALYTICS_CAMP_Q_VIEWS_T_1 + ANALYTICS_CAMP_Q_VIEWS_T_2 + ANALYTICS_CAMP_Q_VIEWS_T_3 + ANALYTICS_CAMP_Q_VIEWS_T_4 + ANALYTICS_CAMP_Q_VIEWS_T_5 + ANALYTICS_CAMP_Q_VIEWS_T_6)/ 6 ,0)ANALYTICS_CAMP_Q_VIEWS_AVG_SEMESTER,
    ROUND((ANALYTICS_CAMP_Q_VIEWS_T_1 + ANALYTICS_CAMP_Q_VIEWS_T_2 + ANALYTICS_CAMP_Q_VIEWS_T_3 + ANALYTICS_CAMP_Q_VIEWS_T_4 + ANALYTICS_CAMP_Q_VIEWS_T_5 + ANALYTICS_CAMP_Q_VIEWS_T_6 + ANALYTICS_CAMP_Q_VIEWS_T_7 + ANALYTICS_CAMP_Q_VIEWS_T_8 + ANALYTICS_CAMP_Q_VIEWS_T_9 + ANALYTICS_CAMP_Q_VIEWS_T_10 + ANALYTICS_CAMP_Q_VIEWS_T_11 + ANALYTICS_CAMP_Q_VIEWS_T_12)/ 12,0) ANALYTICS_CAMP_Q_VIEWS_AVG_YEAR,
    ROUND((ANALYTICS_CAMP_Q_DONATIONS_T_1 + ANALYTICS_CAMP_Q_DONATIONS_T_2 + ANALYTICS_CAMP_Q_DONATIONS_T_3)/ 3,0) ANALYTICS_CAMP_Q_DONATIONS_AVG_QUARTER,
    ROUND((ANALYTICS_CAMP_Q_DONATIONS_T_1 + ANALYTICS_CAMP_Q_DONATIONS_T_2 + ANALYTICS_CAMP_Q_DONATIONS_T_3 + ANALYTICS_CAMP_Q_DONATIONS_T_4 + ANALYTICS_CAMP_Q_DONATIONS_T_5 + ANALYTICS_CAMP_Q_DONATIONS_T_6)/ 6 ,0) ANALYTICS_CAMP_Q_DONATIONS_AVG_SEMESTER,
    ROUND((ANALYTICS_CAMP_Q_DONATIONS_T_1 + ANALYTICS_CAMP_Q_DONATIONS_T_2 + ANALYTICS_CAMP_Q_DONATIONS_T_3 + ANALYTICS_CAMP_Q_DONATIONS_T_4 + ANALYTICS_CAMP_Q_DONATIONS_T_5 + ANALYTICS_CAMP_Q_DONATIONS_T_6 + ANALYTICS_CAMP_Q_DONATIONS_T_7 + ANALYTICS_CAMP_Q_DONATIONS_T_8 + ANALYTICS_CAMP_Q_DONATIONS_T_9 + ANALYTICS_CAMP_Q_DONATIONS_T_10 + ANALYTICS_CAMP_Q_DONATIONS_T_11 + ANALYTICS_CAMP_Q_DONATIONS_T_12)/ 12,0) ANALYTICS_CAMP_Q_DONATIONS_AVG_YEAR
    FROM 
    	TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_MONTHLY;
    
    ALTER TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_AGGREGATES ADD PRIMARY KEY(CAMPAIGN_ID);
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_TRENDS;
    CREATE TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_TRENDS AS   
    SELECT
    A.CAMPAIGN_ID,
    ANALYTICS_CAMP_VIEW_FB_T / NULLIF(ANALYTICS_CAMP_VIEW_FB_T_1,0) ANALYTICS_CAMP_VIEW_FB_DIF_T_T1,
    ANALYTICS_CAMP_VIEW_FB_T / NULLIF(ANALYTICS_CAMP_VIEW_FB_AVG_QUARTER,0) ANALYTICS_CAMP_VIEW_DIF_T_AVG_QUARTER,
    ANALYTICS_CAMP_VIEW_FB_T / NULLIF(ANALYTICS_CAMP_VIEW_FB_AVG_SEMESTER,0) ANALYTICS_CAMP_VIEW_DIF_T_AVG_SEMESTER,
    ANALYTICS_CAMP_VIEW_FB_T / NULLIF(ANALYTICS_CAMP_VIEW_FB_AVG_YEAR,0) ANALYTICS_CAMP_VIEW_DIF_T_AVG_YEAR,
    ANALYTICS_CAMP_VIEW_GOOGLE_T / NULLIF(ANALYTICS_CAMP_VIEW_GOOGLE_T_1,0) ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_T1,
    ANALYTICS_CAMP_VIEW_GOOGLE_T / NULLIF(ANALYTICS_CAMP_VIEW_GOOGLE_AVG_QUARTER,0) ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_QUARTER,
    ANALYTICS_CAMP_VIEW_GOOGLE_T / NULLIF(ANALYTICS_CAMP_VIEW_GOOGLE_AVG_SEMESTER,0) ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_SEMESTER,
    ANALYTICS_CAMP_VIEW_GOOGLE_T / NULLIF(ANALYTICS_CAMP_VIEW_GOOGLE_AVG_YEAR,0) ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_YEAR,
    ANALYTICS_CAMP_VIEW_NULL_T / NULLIF(ANALYTICS_CAMP_VIEW_NULL_T_1,0) ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_T1,
    ANALYTICS_CAMP_VIEW_NULL_T / NULLIF(ANALYTICS_CAMP_VIEW_NULL_AVG_QUARTER,0) ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_QUARTER,
    ANALYTICS_CAMP_VIEW_NULL_T / NULLIF(ANALYTICS_CAMP_VIEW_NULL_AVG_SEMESTER,0) ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_SEMESTER,
    ANALYTICS_CAMP_VIEW_NULL_T / NULLIF(ANALYTICS_CAMP_VIEW_NULL_AVG_YEAR,0) ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_YEAR,
    ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T / NULLIF(ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T_1,0) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_T1,
    ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T / NULLIF(ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_QUARTER,0) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_QUARTER,
    ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T / NULLIF(ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_SEMESTER,0) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_SEMESTER,
    ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T / NULLIF(ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_YEAR,0) ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_YEAR,
    ANALYTICS_CAMP_Q_DONATIONS_T / NULLIF(ANALYTICS_CAMP_Q_DONATIONS_T_1,0) ANALYTICS_CAMP_Q_DONATIONS_DIF_T_T1,
    ANALYTICS_CAMP_Q_DONATIONS_T / NULLIF(ANALYTICS_CAMP_Q_DONATIONS_AVG_QUARTER,0) ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_QUARTER,
    ANALYTICS_CAMP_Q_DONATIONS_T / NULLIF(ANALYTICS_CAMP_Q_DONATIONS_AVG_SEMESTER,0) ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_SEMESTER,
    ANALYTICS_CAMP_Q_DONATIONS_T / NULLIF(ANALYTICS_CAMP_Q_DONATIONS_AVG_YEAR,0) ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_YEAR
    FROM
       TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_MONTHLY A
    LEFT JOIN
       TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_AGGREGATES  B
    ON A.CAMPAIGN_ID = B.CAMPAIGN_ID;
    
    ALTER TABLE TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_TRENDS ADD PRIMARY KEY(CAMPAIGN_ID);
    """
    con.execute(query_analytics)
    
    # +
    query_ngo = f"""
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_USERS_NGO_LEVEL;
    CREATE TABLE TEMPORAL.Z_BASE_USERS_NGO_LEVEL AS
    SELECT
    	ORGANIZATION_ID,
    	COUNT(DISTINCT ID) USERS_CAMP_Q_USERS,
    	SUM(LOGIN_COUNT) USERS_CAMP_Q_LOGIN
    FROM 
    	RAW.USERS
    WHERE 
    	LAST_LOGIN_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')
    GROUP BY 
    	ORGANIZATION_ID;
    
    ALTER TABLE TEMPORAL.Z_BASE_USERS_NGO_LEVEL ADD PRIMARY KEY(ORGANIZATION_ID);
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_SHARES_CAMPAIGN_LEVEL;
    CREATE TABLE TEMPORAL.Z_BASE_SHARES_CAMPAIGN_LEVEL AS
    SELECT
    	CAMPAIGN_ID,
    	COUNT(*) SHARES_CAMP_Q_SHARES
    FROM 
    	CLEANED.SHARES
    WHERE 
    	CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') 
    GROUP BY CAMPAIGN_ID;
    
    ALTER TABLE TEMPORAL.Z_BASE_SHARES_CAMPAIGN_LEVEL ADD PRIMARY KEY(CAMPAIGN_ID);
    
    """
    
    con.execute(query_ngo)
    
    # +
    query_transactions = f"""
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS;
    CREATE TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS AS
    SELECT
    	B.DONATION_ID,
    	SUM(CASE WHEN STATUS = 'approved' THEN AMOUNT ELSE 0 END) AS AMOUNT_APPROVED,
    	SUM(CASE WHEN STATUS = 'rejected' THEN AMOUNT ELSE 0 END) AS AMOUNT_REJECTED,
    	SUM(CASE WHEN STATUS = 'pending' THEN AMOUNT ELSE 0 END) AS AMOUNT_PENDING,
    	SUM(CASE WHEN STATUS = 'cancelled' THEN AMOUNT ELSE 0 END) AS AMOUNT_CANCELLED,
    	SUM(CASE WHEN STATUS = 'charged_back' THEN AMOUNT ELSE 0 END) AS AMOUNT_CHARGED_BACK,
    	SUM(CASE WHEN STATUS = 'in_process' THEN AMOUNT ELSE 0 END) AS AMOUNT_IN_PROCESS,
    	SUM(CASE WHEN STATUS = 'refunded' THEN AMOUNT ELSE 0 END) AS AMOUNT_REFUNDED,
    	SUM(CASE WHEN STATUS = 'approved' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_APPROVED,
    	SUM(CASE WHEN STATUS = 'rejected' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_REJECTED,
    	SUM(CASE WHEN STATUS = 'pending' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_PENDING,
    	SUM(CASE WHEN STATUS = 'cancelled' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_CANCELLED,
    	SUM(CASE WHEN STATUS = 'charged_back' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_CHARGED_BACK,
    	SUM(CASE WHEN STATUS = 'in_process' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_IN_PROCESS,
    	SUM(CASE WHEN STATUS = 'refunded' THEN COLLECTED_AMOUNT ELSE 0 END) AS COLLECTED_AMOUNT_REFUNDED,
    	SUM(CASE WHEN STATUS = 'approved' THEN 1 ELSE 0 END) AS Q_APPROVED,
    	SUM(CASE WHEN STATUS = 'rejected' THEN 1 ELSE 0 END) AS Q_REJECTED,
    	SUM(CASE WHEN STATUS = 'pending' THEN 1 ELSE 0 END) AS Q_PENDING,
    	SUM(CASE WHEN STATUS = 'cancelled' THEN 1 ELSE 0 END) AS Q_CANCELLED,
    	SUM(CASE WHEN STATUS = 'charged_back' THEN 1 ELSE 0 END) AS Q_CHARGED_BACK,
    	SUM(CASE WHEN STATUS = 'in_process' THEN 1 ELSE 0 END) AS Q_IN_PROCESS,
    	SUM(CASE WHEN STATUS = 'refunded' THEN 1 ELSE 0 END) AS Q_REFUNDED,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_019' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_019	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_034' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_034	,
    	SUM(CASE WHEN STATUS_DETAIL IS NULL THEN 1 ELSE 0 END)	AS	Q_NULL	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_040' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_040	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_026' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_026	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_022' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_022	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_86' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_86	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_56' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_56	,
    	SUM(CASE WHEN STATUS_DETAIL ='card_change' THEN 1 ELSE 0 END)	AS	Q_CARD_CHANGE	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_51' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_51	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_52' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_52	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_91' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_91	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_63' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_63	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_55' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_55	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_006' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_006	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_024' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_024	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_020' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_020	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_54' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_54	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_99' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_99	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_96' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_96	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_50' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_50	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_021' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_021	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_62' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_62	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_66' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_66	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_01' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_01	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_11' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_11	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_081' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_081	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_074' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_074	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_035' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_035	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_15' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_15	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_79' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_79	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_109' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_109	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_008' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_008	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_007' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_007	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_21' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_21	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_041' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_041	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_78' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_78	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_61' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_61	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_07' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_07	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_08' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_08	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_other_reason' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_OTHER_REASON	,
    	SUM(CASE WHEN STATUS_DETAIL ='accredited' THEN 1 ELSE 0 END)	AS	Q_ACCREDITED	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_033' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_033	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_bad_filled_security_code' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_60' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_60	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_high_risk' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_HIGH_RISK	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_call_for_authorize' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_CALL_FOR_AUTHORIZE	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_064' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_064	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_64' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_64	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_14' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_14	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_insufficient_amount' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_INSUFFICIENT_AMOUNT	,
    	SUM(CASE WHEN STATUS_DETAIL ='expired' THEN 1 ELSE 0 END)	AS	Q_EXPIRED	,
    	SUM(CASE WHEN STATUS_DETAIL ='settled' THEN 1 ELSE 0 END)	AS	Q_SETTLED	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_015' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_015	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_blacklist' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BLACKLIST	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_135' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_135	,
    	SUM(CASE WHEN STATUS_DETAIL ='pending_review_manual' THEN 1 ELSE 0 END)	AS	Q_PENDING_REVIEW_MANUAL	,
    	SUM(CASE WHEN STATUS_DETAIL ='in_process' THEN 1 ELSE 0 END)	AS	ERROR_Q_IN_PROCESS	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_bad_filled_date' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BAD_FILLED_DATE	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_bad_filled_other' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_BAD_FILLED_OTHER	,
    	SUM(CASE WHEN STATUS_DETAIL ='refunded' THEN 1 ELSE 0 END)	AS	ERROR_Q_REFUNDED	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_145' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_145	,
    	SUM(CASE WHEN STATUS_DETAIL ='error_code_85' THEN 1 ELSE 0 END)	AS	Q_ERROR_CODE_85	,
    	SUM(CASE WHEN STATUS_DETAIL ='cc_rejected_invalid_installments' THEN 1 ELSE 0 END)	AS	Q_CC_REJECTED_INVALID_INSTALLMENTS	
    FROM 
    	RAW.PAYMENT_TRANSACTIONS A
    INNER JOIN 
    	RAW.PAYMENT_METHODS B
    ON A.PAYMENT_METHOD_ID = B.ID
    WHERE 
    	A.CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')
    GROUP BY 
    	DONATION_ID;
    
    ALTER TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS ADD PRIMARY KEY(DONATION_ID);
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_RATIOS;
    CREATE TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_RATIOS AS
    SELECT
    	AA.ID AS DONATION_ID,
    	Q_APPROVED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_APPROVED,
    	Q_REJECTED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_REJECTED,
    	Q_PENDING/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_PENDING,
    	Q_CANCELLED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CANCELLED,
    	Q_CHARGED_BACK/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CHARGED_BACK,
    	Q_IN_PROCESS/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_IN_PROCESS,
    	Q_REFUNDED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_REFUNDED,
    	Q_ERROR_CODE_019/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_019,
    	Q_ERROR_CODE_034/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_034,
    	Q_NULL/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_NULL,
    	Q_ERROR_CODE_040/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_040,
    	Q_ERROR_CODE_026/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_026,
    	Q_ERROR_CODE_022/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_022,
    	Q_ERROR_CODE_86/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_86,
    	Q_ERROR_CODE_56/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_56,
    	Q_CARD_CHANGE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CARD_CHANGE,
    	Q_ERROR_CODE_51/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_51,
    	Q_ERROR_CODE_52/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_52,
    	Q_ERROR_CODE_91/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_91,
    	Q_ERROR_CODE_63/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_63,
    	Q_ERROR_CODE_55/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_55,
    	Q_ERROR_CODE_006/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_006,
    	Q_ERROR_CODE_024/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_024,
    	Q_ERROR_CODE_020/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_020,
    	Q_ERROR_CODE_54/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_54,
    	Q_ERROR_CODE_99/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_99,
    	Q_ERROR_CODE_96/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_96,
    	Q_ERROR_CODE_50/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_50,
    	Q_ERROR_CODE_021/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_021,
    	Q_ERROR_CODE_62/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_62,
    	Q_ERROR_CODE_66/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_66,
    	Q_ERROR_CODE_01/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_01,
    	Q_ERROR_CODE_11/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_11,
    	Q_ERROR_CODE_081/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_081,
    	Q_ERROR_CODE_074/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_074,
    	Q_ERROR_CODE_035/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_035,
    	Q_ERROR_CODE_15/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_15,
    	Q_ERROR_CODE_79/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_79,
    	Q_ERROR_CODE_109/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_109,
    	Q_ERROR_CODE_008/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_008,
    	Q_ERROR_CODE_007/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_007,
    	Q_ERROR_CODE_21/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_21,
    	Q_ERROR_CODE_041/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_041,
    	Q_ERROR_CODE_78/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_78,
    	Q_ERROR_CODE_61/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_61,
    	Q_ERROR_CODE_07/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_07,
    	Q_ERROR_CODE_08/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_08,
    	Q_CC_REJECTED_OTHER_REASON/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_OTHER_REASON,
    	Q_ACCREDITED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ACCREDITED,
    	Q_ERROR_CODE_033/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_033,
    	Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE,
    	Q_ERROR_CODE_60/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_60,
    	Q_CC_REJECTED_HIGH_RISK/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_HIGH_RISK,
    	Q_CC_REJECTED_CALL_FOR_AUTHORIZE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_CALL_FOR_AUTHORIZE,
    	Q_ERROR_CODE_064/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_064,
    	Q_ERROR_CODE_64/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_64,
    	Q_ERROR_CODE_14/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_14,
    	Q_CC_REJECTED_INSUFFICIENT_AMOUNT/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_INSUFFICIENT_AMOUNT,
    	Q_EXPIRED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_EXPIRED,
    	Q_SETTLED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_SETTLED,
    	Q_ERROR_CODE_015/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_015,
    	Q_CC_REJECTED_BLACKLIST/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BLACKLIST,
    	Q_ERROR_CODE_135/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_135,
    	Q_PENDING_REVIEW_MANUAL/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_PENDING_REVIEW_MANUAL,
    	ERROR_Q_IN_PROCESS/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_ERROR_Q_IN_PROCESS,
    	Q_CC_REJECTED_BAD_FILLED_DATE/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BAD_FILLED_DATE,
    	Q_CC_REJECTED_BAD_FILLED_OTHER/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_BAD_FILLED_OTHER,
    	ERROR_Q_REFUNDED/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_ERROR_Q_REFUNDED,
    	Q_ERROR_CODE_145/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_145,
    	Q_ERROR_CODE_85/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_ERROR_CODE_85,
    	Q_CC_REJECTED_INVALID_INSTALLMENTS/(CASE WHEN DONATION_DURACION_MESES = 0 THEN NULL ELSE DONATION_DURACION_MESES END) AS RATIO_Q_CC_REJECTED_INVALID_INSTALLMENTS
    FROM
    	(SELECT
    		ID,
            extract('year' from age(to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') , CREATED_AT)) * 12 
            + extract('month' from age(to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') , CREATED_AT))  as DONATION_DURACION_MESES
    	FROM
    		TEMPORAL.Z_BASE_DONATIONS) AA
    LEFT JOIN 
    	TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS B
    ON AA.ID = B.DONATION_ID;
    
    ALTER TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_RATIOS ADD PRIMARY KEY(DONATION_ID);
    
    	
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_PAYMENT_DATES;
    CREATE TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_PAYMENT_DATES AS	
    SELECT
    	DONATION_ID,
    	AA.*
    FROM	
    (SELECT 
    	PAYMENT_METHOD_ID,
    	AVG(extract('day' from CREATED_AT)) AVG_PAY_DAY,
    	stddev_samp(extract('day' from CREATED_AT)) STD_PAY_DAY,
        percentile_cont(0.5) within group(order by extract('day' from CREATED_AT) ) MEDIAN_PAY_DAY
    FROM 
    	RAW.PAYMENT_TRANSACTIONS 
    WHERE STATUS = 'approved'
    	 AND CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')
    GROUP BY 1) AA
    LEFT JOIN 
    	RAW.PAYMENT_METHODS B
    ON AA.PAYMENT_METHOD_ID = B.ID
    WHERE DONATION_ID NOT IN (SELECT 
    							DONATION_ID
    						  FROM
    							RAW.PAYMENT_METHODS
    						  GROUP BY 
    						  	DONATION_ID
    						  HAVING 
    						  	COUNT(*) > 1); -- DUPLICADO;
    
    ALTER TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_PAYMENT_DATES ADD PRIMARY KEY(DONATION_ID);
      	
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_REJECTED_PAYMENT_DATES;
    CREATE TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_REJECTED_PAYMENT_DATES AS	
    SELECT
    	B.DONATION_ID,
    	AA.*
    FROM	
    	(SELECT 
    		PAYMENT_METHOD_ID,
    		AVG(extract('day' from CREATED_AT)) AVG_REJECTED_DAY,
    		stddev_samp(extract('day' from CREATED_AT)) STD_REJECTED_DAY,
            percentile_cont(0.5) within group (order by extract('day' from CREATED_AT) ) MEDIAN_REJECTED_DAY
    	FROM 
    		RAW.PAYMENT_TRANSACTIONS 
    	WHERE 
    		STATUS = 'rejected'
    	 	AND CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')
    	GROUP BY 1) AA
    INNER JOIN 
    	RAW.PAYMENT_METHODS B
    ON AA.PAYMENT_METHOD_ID = B.ID
    WHERE DONATION_ID NOT IN (SELECT 
    							DONATION_ID
    						  FROM
    							RAW.PAYMENT_METHODS
    						  GROUP BY 
    						  	DONATION_ID
    						  HAVING 
    						  	COUNT(*) > 1); -- DUPLICATES;
    
    ALTER TABLE TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_REJECTED_PAYMENT_DATES ADD PRIMARY KEY(DONATION_ID);
    """
    
    con.execute(query_transactions)
    # -
    
    query_donors = f"""
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_DONORS_UPDATES;
    CREATE TABLE TEMPORAL.Z_BASE_DONORS_UPDATES AS
    SELECT 
    	*,
        DATE_PART('day', to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - VERSION_LAST_UPDATE)  DONOR_VERSION_LAST_UPDATE
    FROM
    	(SELECT 
    		ITEM_ID,
    		COUNT(*) VERSIONS_Q_UPDATES,
    		MAX(CREATED_AT) VERSION_LAST_UPDATE
    	FROM 
    		RAW.VERSIONS
    	WHERE 
    		ITEM_TYPE = 'Donor'
    	AND CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') 
    	GROUP BY ITEM_ID) AA;
    
    ALTER TABLE TEMPORAL.Z_BASE_DONORS_UPDATES ADD PRIMARY KEY(ITEM_ID);
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_DONORS_SHARES;
    CREATE TABLE TEMPORAL.Z_BASE_DONORS_SHARES  AS	
    SELECT
    	*
    FROM
    	CLEANED.SHARES
    WHERE CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss');
    
    ALTER TABLE TEMPORAL.Z_BASE_DONORS_SHARES  ADD PRIMARY KEY(DONOR_ID);
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_DONORS;
    CREATE TABLE TEMPORAL.Z_BASE_DONORS  AS
    SELECT
    	A.ID AS DONOR_ID,
    	A.STREET_ADDRESS AS DONOR_ADDRESS,
    	A.CITY_ADDRESS AS DONOR_CITY,
    	A.STATE_ADDRESS AS DONOR_STATE,
    	A.ZIPCODE_ADDRESS AS DONOR_ZIPCODE,
    	A.COUNTRY_ADDRESS AS DONOR_COUNTRY,
    	TRIM(A.OCCUPATION) AS DONOR_OCCUPATION,
    	A.GENDER AS DONOR_GENDER,
    	A.PHONE AS DONOR_PHONE,
    	A.CELLPHONE AS DONOR_CELLPHONE,
    	A.BIRTHDAY AS DONOR_BIRTH,
    	A.CREATED_AT AS DONOR_BEGINNING_DATE,
    	CONCAT(EXTRACT('YEAR' FROM A.CREATED_AT),'-',EXTRACT('MONTH' FROM A.CREATED_AT)) AS DONOR_BEGINNING_DATE_YM,
    	A.UPDATED_AT AS DONOR_UPDATE_DATE,
        date_part('day', to_timestamp('2018-01-31 23:59:59', 'YYYY-MM-DD hh24:mi:ss') -  A.UPDATED_AT) DONOR_LAST_UPDATE_DAYS,
    	CAST(CONCAT(EXTRACT ('YEAR' FROM A.UPDATED_AT), EXTRACT ('MONTH' FROM A.UPDATED_AT)) AS INT) AS DONACION_UPDATE_DATE_YM,
    	B.VERSIONS_Q_UPDATES AS DONOR_VERSION_Q_UPDATES,
    	B.VERSION_LAST_UPDATE,
    	CASE WHEN C.DONOR_ID IS NOT NULL THEN 1 ELSE 0 END DONOR_WHO_SHARES,  -- ID DONORS WHO SHARE THEIR DONATION IN SOCIAL MEDIA
    	CASE WHEN  A.PHONE IS NOT NULL OR A.CELLPHONE IS NOT NULL THEN 1 
    		 WHEN A.PHONE IS NOT NULL AND A.CELLPHONE IS NOT NULL THEN 2
    		 ELSE 0 END AS DONOR_Q_PHONES,
    	(CASE WHEN TRIM(A.STREET_ADDRESS) IS NOT NULL OR TRIM(A.STREET_ADDRESS) != '' OR A.STREET_ADDRESS != '--,--' OR A.STREET_ADDRESS != '*,*'   THEN 1 ELSE 0 END + 
    		CASE WHEN TRIM(A.CITY_ADDRESS) IS NOT NULL OR TRIM(A.CITY_ADDRESS) != '-' OR A.CITY_ADDRESS NOT LIKE '%%XX%%'  OR A.CITY_ADDRESS = ' ' THEN 1 ELSE 0 END +  
    		CASE WHEN TRIM(A.STATE_ADDRESS) IS NOT NULL OR TRIM(A.STATE_ADDRESS) != ''  OR A.STATE_ADDRESS = ' ' THEN 1 ELSE 0 END +
    		CASE WHEN TRIM(A.ZIPCODE_ADDRESS) IS NOT NULL OR TRIM(A.ZIPCODE_ADDRESS) != ''  OR A.ZIPCODE_ADDRESS = ' ' THEN 1 ELSE 0 END +
    		CASE WHEN TRIM(A.COUNTRY_ADDRESS) IS NOT NULL OR TRIM(A.COUNTRY_ADDRESS) != ''  OR A.COUNTRY_ADDRESS = ' ' THEN 1 ELSE 0 END +
    		-- CASE WHEN TRIM(A.OCCUPATION) IS NOT NULL OR TRIM(A.OCCUPATION) <> '' OR A.OCCUPATION = ' ' THEN 1 ELSE 0 END + - Wont be able in production
    		-- CASE WHEN A.GENDER IS NOT NULL THEN 1 ELSE 0 END + - Wont be able in production
    		CASE WHEN TRIM(A.CELLPHONE) IS NOT NULL OR TRIM(A.CELLPHONE) != ''  OR A.CELLPHONE = ' ' THEN 1 ELSE 0 END +
    			-- CASE WHEN A.BIRTHDAY IS NOT NULL THEN 1 ELSE 0 END +  - Wont be able in production
    		CASE WHEN TRIM(A.PHONE) IS NOT NULL OR TRIM(A.PHONE) != ''  OR A.PHONE = ' ' THEN 1 ELSE 0 END ) DONOR_Q_COMPLETED_DATA_IN_FORM
    FROM 
    	CLEANED.DONORS A
    LEFT JOIN 
    	TEMPORAL.Z_BASE_DONORS_UPDATES B
    ON A.ID = B.ITEM_ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_DONORS_SHARES C
    ON A.ID = C.DONOR_ID;
    
    ALTER TABLE TEMPORAL.Z_BASE_DONORS ADD PRIMARY KEY(DONOR_ID);
    
    """
    con.execute(query_donors)
    
    query_max = """
    DROP TABLE IF EXISTS TEMPORAL.DONOR_MAX_COMPLETED_DATA_IN_FORM;
    CREATE TABLE TEMPORAL.DONOR_MAX_COMPLETED_DATA_IN_FORM AS
    SELECT
        MAX(DONOR_Q_COMPLETED_DATA_IN_FORM) DONOR_MAX_COMPLETED_DATA_IN_FORM
    FROM
        TEMPORAL.Z_BASE_DONORS;
    """
    con.execute(query_max)
    
    query_payment_method = f"""
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_Q_DIFFERENT_PAYMENT_METHOD_PER_DONATION;
    CREATE TABLE TEMPORAL.Z_BASE_Q_DIFFERENT_PAYMENT_METHOD_PER_DONATION AS
    SELECT
    	DONATION_ID, 
    	COUNT(*) DONATION_Q_DIFFERENT_PAYMENT_METHODS,
    	SUM(CASE WHEN CARD_METHOD_ID='amex' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_AMEX,
    	SUM(CASE WHEN CARD_METHOD_ID='argencard' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_ARGENCARD,
    	SUM(CASE WHEN CARD_METHOD_ID='banelco' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_BANELCO,
    	SUM(CASE WHEN CARD_METHOD_ID='cabal' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_CABAL,
    	SUM(CASE WHEN CARD_METHOD_ID='cmr' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_CMR,
    	SUM(CASE WHEN CARD_METHOD_ID='codensa' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_CODENSA,
    	SUM(CASE WHEN CARD_METHOD_ID='cordobesa' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_CORDOBESA,
    	SUM(CASE WHEN CARD_METHOD_ID='credimas' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_CREDIMAS,
    	SUM(CASE WHEN CARD_METHOD_ID='debcabal' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_DEBCABAL,
    	SUM(CASE WHEN CARD_METHOD_ID='debmaster' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_DEBMASTER,
    	SUM(CASE WHEN CARD_METHOD_ID='debvisa' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_DEBVISA,
    	SUM(CASE WHEN CARD_METHOD_ID='diners' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_DINERS,
    	SUM(CASE WHEN CARD_METHOD_ID='maestro' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_MAESTRO,
    	SUM(CASE WHEN CARD_METHOD_ID='mas' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_PAGO_MAS,
    	SUM(CASE WHEN CARD_METHOD_ID='master' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_PAGO_MASTER,
    	SUM(CASE WHEN CARD_METHOD_ID='mercadopago_cc' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_MERCADOPAGO_CC,
    	SUM(CASE WHEN CARD_METHOD_ID='naranja' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_NARANJA,
    	SUM(CASE WHEN CARD_METHOD_ID='nativa' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_NATIVA,
    	SUM(CASE WHEN CARD_METHOD_ID='nevada' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_NEVADA,
    	SUM(CASE WHEN CARD_METHOD_ID='tarshop' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_TARSHOP,
    	SUM(CASE WHEN CARD_METHOD_ID='visa' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_VISA,
    	SUM(CASE WHEN CARD_METHOD_ID='visa_debito' THEN 1 ELSE 0 END) DONATION_Q_PAYMENT_METHOD_VISA_DEBITO
    FROM 
    	RAW.PAYMENT_METHODS
    WHERE
    	CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') 
    GROUP BY 
    	DONATION_ID;
    
    ALTER TABLE TEMPORAL.Z_BASE_Q_DIFFERENT_PAYMENT_METHOD_PER_DONATION ADD PRIMARY KEY(DONATION_ID);
    
    DROP TABLE IF EXISTS TEMPORAL.Z_BASE_CARD_METHOD;		
    CREATE TABLE TEMPORAL.Z_BASE_CARD_METHOD  AS
    SELECT 
    	A.DONATION_ID,
    	A.CARD_METHOD_ID AS DONATION_LAST_PAYMENT_METHOD_USED
    FROM 
    	RAW.PAYMENT_METHODS A
    INNER JOIN 
    	(SELECT 
    		DONATION_ID, 
    		MAX(CREATED_AT) MAX_DATE 
    	FROM 
    		RAW.PAYMENT_METHODS 
    	WHERE 
    		CREATED_AT <= to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') GROUP BY 1) B
    ON A.DONATION_ID = B.DONATION_ID
    AND A.CREATED_AT = B.MAX_DATE;
    
    ALTER TABLE TEMPORAL.Z_BASE_CARD_METHOD ADD PRIMARY KEY(DONATION_ID);
    """
    con.execute(query_payment_method)
    
    # #### Final table
    
    query_final = f"""
    
    DROP TABLE IF EXISTS FOLDS.TRAIN_FOLD_{fold_number};
    CREATE TABLE FOLDS.TRAIN_FOLD_{fold_number}  AS
    
    SELECT
    
    -- IDs
    
    A.ID AS DONATION_ID,
    A.CAMPAIGN_ID,
    A.DONOR_ID,
    C.ID AS ORGANIZATION_ID,
    
    -- DONATION
    
    A.AMOUNT DONATION_DECLARED_AMOUNT,
    CASE WHEN A.AMOUNT_NAME IS NULL THEN 0 ELSE 1 END DONATION_AMOUNT_NAME,
    -- A.ONE_TIME DONATION_ONETIME,
    -- A.MONTHLY DONATION_MONTHLY,
    A.IP DONATION_IP,
    -- A.ENABLE_UNTIL DONATION_PROGRAMMED_END,
    A.RISK_MEASURE DONATION_RISK_MEASURE,
    DATE(A.CREATED_AT) DONATION_BEGINNING_DATE,
    DATE(A.DELETED_AT) AS DONATION_END_DATE,
    CAST(EXTRACT('YEAR' FROM A.CREATED_AT)*100 + EXTRACT('MONTH' FROM A.CREATED_AT) AS INT) AS DONATION_BEGINNING_YM,
    CAST(EXTRACT('YEAR' FROM A.DELETED_AT)*100 + EXTRACT('MONTH' FROM A.DELETED_AT) AS INT) AS DONATION_END_YM,
    DATE_PART('day', to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') - A.CREATED_AT) DONATION_DURATION,
    -- CASE WHEN A.ENABLE_UNTIL IS NOT NULL THEN TIMESTAMPDIFF(DAY, A.CREATED_AT, A.ENABLE_UNTIL) ELSE NULL END DONATION_PROGRAMMED_DURATION,
    extract('DAY' from A.CREATED_AT) DONATION_DAY,
    CASE WHEN extract('DAY' from A.CREATED_AT) <= 15 THEN 1 ELSE 2 END AS DONATION_FORTNIGHT,
    extract(HOUR from A.CREATED_AT) DONATION_HOUR,
    
    -- CAMPAIGN
    
    -- B.TITLE CAMPAIGN_TITLE,
    -- B.DESCRIPTION CAMPAIGN_DESCRIPTION,
    CASE WHEN B.THANKS_EMAIL IS NOT NULL THEN 1 ELSE 0 END AS CAMPAIGN_THANKS_EMAIL,
    -- B.THANKS_MESSAGE CAMPAIGN_THANKS_MESSAGE,
    DATE(B.CREATED_AT) AS CAMPAIGN_BEGINNING,
    DATE(B.DELETED_AT) AS CAMPAIGN_END,
    CAST(extract('YEAR' from B.CREATED_AT)*100 + extract('MONTH' from B.CREATED_AT)AS int) AS CAMPAIGN_BEGINNING_YM,
    CAST(extract('YEAR' from B.DELETED_AT)*100 + extract('MONTH' from B.DELETED_AT)AS int) AS CAMPAIGN_END_YM,
    CASE WHEN B.DELETED_AT IS NOT NULL THEN date_part('DAY', B.CREATED_AT -  B.DELETED_AT) ELSE date_part('DAY', B.CREATED_AT -  to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss'))  END CAMPAIGN_DURATION,
    CASE WHEN B.DELETED_AT IS NULL OR B.DELETED_AT > to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') THEN 1 ELSE 0 END AS CAMPAIGN_ACTIVE,
    
    -- ANALYTICS CAMPIGN
    
    G.ANALYTICS_CAMP_Q_VIEWS,
    G.ANALYTICS_CAMP_Q_DONATIONS,
    G.ANALYTICS_RATIO_VIEWS,
    G.ANALYTICS_RATIO_DONATION,
    G.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL,
    G.ANALYTICS_CAMP_VIEW_FB,
    G.ANALYTICS_CAMP_DONATION_FB,
    G.ANALYTICS_CAMP_VIEW_GOOGLE,
    G.ANALYTICS_CAMP_DONATION_GOOGLE,
    G.ANALYTICS_CAMP_VIEW_NULL,
    G.ANALYTICS_CAMP_DONATION_NULL,
    G.ANALYTICS_CAMP_VIEW_DONARONLINE,
    G.ANALYTICS_CAMP_DONATION_DONARONLINE,
    G.ANALYTICS_CAMP_VIEW_URL_ONG,
    G.ANALYTICS_CAMP_DONATION_URL_ONG,
    G.ANALYTICS_CAMP_VIEW_OTRO,
    G.ANALYTICS_CAMP_DONATION_OTRO,
    M.ANALYTICS_CAMP_VIEW_FB_T,
    M.ANALYTICS_CAMP_VIEW_GOOGLE_T,
    M.ANALYTICS_CAMP_VIEW_NULL_T,
    M.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_T, 
    M.ANALYTICS_CAMP_Q_VIEWS_T,
    M.ANALYTICS_CAMP_Q_DONATIONS_T,
    R.ANALYTICS_CAMP_VIEW_FB_AVG_QUARTER,
    R.ANALYTICS_CAMP_VIEW_FB_AVG_SEMESTER,
    R.ANALYTICS_CAMP_VIEW_FB_AVG_YEAR,
    R.ANALYTICS_CAMP_VIEW_GOOGLE_AVG_QUARTER,
    R.ANALYTICS_CAMP_VIEW_GOOGLE_AVG_SEMESTER,
    R.ANALYTICS_CAMP_VIEW_GOOGLE_AVG_YEAR,
    R.ANALYTICS_CAMP_VIEW_NULL_AVG_QUARTER,
    R.ANALYTICS_CAMP_VIEW_NULL_AVG_SEMESTER,
    R.ANALYTICS_CAMP_VIEW_NULL_AVG_YEAR,
    R.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_QUARTER,
    R.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_SEMESTER,
    R.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_AVG_YEAR,
    R.ANALYTICS_CAMP_Q_VIEWS_AVG_QUARTER,
    R.ANALYTICS_CAMP_Q_VIEWS_AVG_SEMESTER,
    R.ANALYTICS_CAMP_Q_VIEWS_AVG_YEAR,
    R.ANALYTICS_CAMP_Q_DONATIONS_AVG_QUARTER,
    R.ANALYTICS_CAMP_Q_DONATIONS_AVG_SEMESTER,
    R.ANALYTICS_CAMP_Q_DONATIONS_AVG_YEAR,
    S.ANALYTICS_CAMP_VIEW_FB_DIF_T_T1,
    S.ANALYTICS_CAMP_VIEW_DIF_T_AVG_QUARTER,
    S.ANALYTICS_CAMP_VIEW_DIF_T_AVG_SEMESTER,
    S.ANALYTICS_CAMP_VIEW_DIF_T_AVG_YEAR,
    S.ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_T1,
    S.ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_QUARTER,
    S.ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_SEMESTER,
    S.ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_YEAR,
    S.ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_T1,
    S.ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_QUARTER,
    S.ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_SEMESTER,
    S.ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_YEAR,
    S.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_T1,
    S.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_QUARTER,
    S.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_SEMESTER,
    S.ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_YEAR,
    S.ANALYTICS_CAMP_Q_DONATIONS_DIF_T_T1,
    S.ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_QUARTER,
    S.ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_SEMESTER,
    S.ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_YEAR,
    
    
    -- NGO
    
    -- C. NAME AS NGO,
    -- C.LEGAL_NAME NGO_NAME,
    -- C.BIO NGO_BIO,
    -- C.ADDRESS_1 NGO_ADDRESS,
    -- C.ADDRESS_2 NGO_ADDRESS_2,
    -- C.ZIP_CODE NGO_ZIPCODE,
    -- C.CITY AS NGO_CITY,
    -- C.STATE AS NGO_STATE,
    -- C.COUNTRY AS NGO_COUNTRY,
    -- C.WEBSITE AS NGO_WEBSITE,
    CASE WHEN C.FACEBOOK IS NOT NULL THEN 1 ELSE 0 END AS NGO_FACEBOOK,
    CASE WHEN C.TWITTER IS NOT NULL THEN 1 ELSE 0 END  AS NGO_TWITTER,
    -- C.SKYPE AS NGO_SKYPE,
    CASE WHEN C.LINKEDIN IS NOT NULL THEN 1 ELSE 0 END AS NGO_LINKEDIN,
    -- C.OPT_IN AS NGO_SUSCRIPCION_NEWSLETTER,
    -- DATE(C. ENABLED_AT) AS NGO_BEGINNING_IN_DONARONLINE,
    -- C. DISCARDED_AT AS NGO_END_IN_DONARONLINE,
    -- CAST(YEAR(C. ENABLED_AT)*100 + MONTH(C. ENABLED_AT)AS UNSIGNED) AS NGO_BEGINNING_IN_DONARONLINE_YM,
    -- CAST(YEAR(C. DISCARDED_AT) * 100 + MONTH(C. DISCARDED_AT) AS UNSIGNED) AS NGO_END_IN_DONARONLINE_YM,
    -- CASE WHEN C.DISCARDED_AT IS NOT NULL THEN TIMESTAMPDIFF(DAY, C.ENABLED_AT, C.DISCARDED_AT) ELSE TIMESTAMPDIFF(DAY, C.ENABLED_AT, to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')) END NGO_DURATION_IN_DONARONLINE,
     CASE WHEN C.DISCARDED_AT IS NULL OR C.DISCARDED_AT > to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss') THEN 1 ELSE 0 END AS NGO_ACTIVE,
    
    -- NGO TAG
    
    J.TAGS_NGO_Q_TAGS,
    J.TAGS_EDUCATION,
    J.TAGS_CHILDHOOD,
    J.TAGS_HEALTH,
    J.TAGS_POVERTY,
    J.TAGS_HUMANRIGHTS,
    J.TAGS_ASSOCIATIONS,
    J.TAGS_VOLUNTEERING,
    J.TAGS_DISABLED,
    J.TAGS_ART,
    J.TAGS_ENVIRONMENT,
    J.TAGS_EMPLOYMENT,
    J.TAGS_SPORTS,
    J.TAGS_ANIMALS,
    J.TAGS_MICROCREDIT,
    J.TAGS_SCIENCE,
    J.TAGS_RELIGION,
    J.TAGS_TECH,
    J.TAGS_COOPERATION,
    J.TAGS_GENDER,
    J.TAGS_POLITICS,
    J.TAGS_HOME,
    J.TAGS_AGRICULTURE,
    J.TAGS_NATURAL_DISASTERS,
    J.TAGS_ELDERLY,
    
    -- NGO USERS
     H.USERS_CAMP_Q_USERS,
     H.USERS_CAMP_Q_LOGIN,
     I.SHARES_CAMP_Q_SHARES,
    
    -- PAYMENTS
    
    E.AMOUNT_APPROVED,
    E.AMOUNT_REJECTED,
    E.AMOUNT_PENDING,
    E.AMOUNT_CANCELLED,
    E.AMOUNT_CHARGED_BACK,
    E.AMOUNT_IN_PROCESS,
    E.AMOUNT_REFUNDED,
    E.COLLECTED_AMOUNT_APPROVED,
    E.COLLECTED_AMOUNT_REJECTED,
    E.COLLECTED_AMOUNT_PENDING,
    E.COLLECTED_AMOUNT_CANCELLED,
    E.COLLECTED_AMOUNT_CHARGED_BACK,
    E.COLLECTED_AMOUNT_IN_PROCESS,
    E.COLLECTED_AMOUNT_REFUNDED,
    D.RATIO_Q_APPROVED,
    D.RATIO_Q_REJECTED,
    D.RATIO_Q_PENDING,
    D.RATIO_Q_CANCELLED,
    D.RATIO_Q_CHARGED_BACK,
    D.RATIO_Q_IN_PROCESS,
    D.RATIO_Q_REFUNDED,
    D.RATIO_Q_ERROR_CODE_019,
    D.RATIO_Q_ERROR_CODE_034,
    D.RATIO_Q_NULL,
    D.RATIO_Q_ERROR_CODE_040,
    D.RATIO_Q_ERROR_CODE_026,
    D.RATIO_Q_ERROR_CODE_022,
    D.RATIO_Q_ERROR_CODE_86,
    D.RATIO_Q_ERROR_CODE_56,
    D.RATIO_Q_CARD_CHANGE,
    D.RATIO_Q_ERROR_CODE_51,
    D.RATIO_Q_ERROR_CODE_52,
    D.RATIO_Q_ERROR_CODE_91,
    D.RATIO_Q_ERROR_CODE_63,
    D.RATIO_Q_ERROR_CODE_55,
    D.RATIO_Q_ERROR_CODE_006,
    D.RATIO_Q_ERROR_CODE_024,
    D.RATIO_Q_ERROR_CODE_020,
    D.RATIO_Q_ERROR_CODE_54,
    D.RATIO_Q_ERROR_CODE_99,
    D.RATIO_Q_ERROR_CODE_96,
    D.RATIO_Q_ERROR_CODE_50,
    D.RATIO_Q_ERROR_CODE_021,
    D.RATIO_Q_ERROR_CODE_62,
    D.RATIO_Q_ERROR_CODE_66,
    D.RATIO_Q_ERROR_CODE_01,
    D.RATIO_Q_ERROR_CODE_11,
    D.RATIO_Q_ERROR_CODE_081,
    D.RATIO_Q_ERROR_CODE_074,
    D.RATIO_Q_ERROR_CODE_035,
    D.RATIO_Q_ERROR_CODE_15,
    D.RATIO_Q_ERROR_CODE_79,
    D.RATIO_Q_ERROR_CODE_109,
    D.RATIO_Q_ERROR_CODE_008,
    D.RATIO_Q_ERROR_CODE_007,
    D.RATIO_Q_ERROR_CODE_21,
    D.RATIO_Q_ERROR_CODE_041,
    D.RATIO_Q_ERROR_CODE_78,
    D.RATIO_Q_ERROR_CODE_61,
    D.RATIO_Q_ERROR_CODE_07,
    D.RATIO_Q_ERROR_CODE_08,
    D.RATIO_Q_CC_REJECTED_OTHER_REASON,
    D.RATIO_Q_ACCREDITED,
    D.RATIO_Q_ERROR_CODE_033,
    D.RATIO_Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE,
    D.RATIO_Q_ERROR_CODE_60,
    D.RATIO_Q_CC_REJECTED_HIGH_RISK,
    D.RATIO_Q_CC_REJECTED_CALL_FOR_AUTHORIZE,
    D.RATIO_Q_ERROR_CODE_064,
    D.RATIO_Q_ERROR_CODE_64,
    D.RATIO_Q_ERROR_CODE_14,
    D.RATIO_Q_CC_REJECTED_INSUFFICIENT_AMOUNT,
    D.RATIO_Q_EXPIRED,
    D.RATIO_Q_SETTLED,
    D.RATIO_Q_ERROR_CODE_015,
    D.RATIO_Q_CC_REJECTED_BLACKLIST,
    D.RATIO_Q_ERROR_CODE_135,
    D.RATIO_Q_PENDING_REVIEW_MANUAL,
    D.RATIO_ERROR_Q_IN_PROCESS,
    D.RATIO_Q_CC_REJECTED_BAD_FILLED_DATE,
    D.RATIO_Q_CC_REJECTED_BAD_FILLED_OTHER,
    D.RATIO_ERROR_Q_REFUNDED,
    D.RATIO_Q_ERROR_CODE_145,
    D.RATIO_Q_ERROR_CODE_85,
    D.RATIO_Q_CC_REJECTED_INVALID_INSTALLMENTS,
    N.DONATION_Q_DIFFERENT_PAYMENT_METHODS,
    N.DONATION_Q_PAYMENT_METHOD_AMEX,
    N.DONATION_Q_PAYMENT_METHOD_ARGENCARD,
    N.DONATION_Q_PAYMENT_METHOD_BANELCO,
    N.DONATION_Q_PAYMENT_METHOD_CABAL,
    N.DONATION_Q_PAYMENT_METHOD_CMR,
    N.DONATION_Q_PAYMENT_METHOD_CODENSA,
    N.DONATION_Q_PAYMENT_METHOD_CORDOBESA,
    N.DONATION_Q_PAYMENT_METHOD_CREDIMAS,
    N.DONATION_Q_PAYMENT_METHOD_DEBCABAL,
    N.DONATION_Q_PAYMENT_METHOD_DEBMASTER,
    N.DONATION_Q_PAYMENT_METHOD_DEBVISA,
    N.DONATION_Q_PAYMENT_METHOD_DINERS,
    N.DONATION_Q_PAYMENT_METHOD_MAESTRO,
    N.DONATION_Q_PAYMENT_METHOD_PAGO_MAS,
    N.DONATION_Q_PAYMENT_METHOD_PAGO_MASTER,
    N.DONATION_Q_PAYMENT_METHOD_MERCADOPAGO_CC,
    N.DONATION_Q_PAYMENT_METHOD_NARANJA,
    N.DONATION_Q_PAYMENT_METHOD_NATIVA,
    N.DONATION_Q_PAYMENT_METHOD_NEVADA,
    N.DONATION_Q_PAYMENT_METHOD_TARSHOP,
    N.DONATION_Q_PAYMENT_METHOD_VISA,
    N.DONATION_Q_PAYMENT_METHOD_VISA_DEBITO,
    Q.DONATION_LAST_PAYMENT_METHOD_USED,
    ROUND(K.AVG_PAY_DAY) AVG_PAY_DAY,
    K.STD_PAY_DAY,
    ROUND (k.MEDIAN_PAY_DAY) MEDIAN_PAY_DAY,
    ROUND(P.AVG_REJECTED_DAY) AVG_REJECTED_DAY,
    P.STD_REJECTED_DAY,
    ROUND (p.MEDIAN_REJECTED_DAY) MEDIAN_REJECTED_DAY,
    ABS(K.AVG_PAY_DAY - P.AVG_REJECTED_DAY) PAYMENT_DIFF_DAYS_APPROVED_VS_REJECTED,
    ABS(K.MEDIAN_PAY_DAY - P.MEDIAN_REJECTED_DAY) PAYMENT_DIFF_DAYS_MEDIAN_APPROVED_VS_REJECTED,
    
    -- DONOR
    
    -- F.STREET_ADDRESS AS DONOR_ADDRESS,
    -- F.CITY_ADDRESS AS DONOR_CITY,
    -- F.STATE_ADDRESS AS DONOR_STATE,
    -- F.ZIPCODE_ADDRESS AS DONOR_ZIPCODE,
    -- F.COUNTRY_ADDRESS AS DONOR_COUNTRY,
    -- F.OCCUPATION AS DONOR_OCCUPATION,
    -- CASE WHEN F.DONOR_GENDER = 'Mujer' THEN 1 ELSE 0 END AS DONOR_GENDER, --  Variable wont be able in production
    CASE WHEN F.DONOR_PHONE IS NOT NULL THEN 1 ELSE 0 END AS DONOR_PHONE,
    CASE WHEN F.DONOR_CELLPHONE IS NOT  NULL THEN 1 ELSE 0 END AS DONOR_CELLPHONE,
    -- F.BIRTHDAY AS DONOR_BIRTH, -- Variable wont be able in production
    -- F.DONOR_AGE_WHEN_DONATED, -- Variable wont be able in production
    -- F.DONOR_AGE, -- Variable wont be able in production
    F.DONOR_UPDATE_DATE,
    F.DONOR_LAST_UPDATE_DAYS,
    F.DONACION_UPDATE_DATE_YM AS DONOR_UPDATED_DATE_YM,
    F.DONOR_VERSION_Q_UPDATES,
    F.VERSION_LAST_UPDATE AS DONOR_VERSION_LAST_UPDATE,
    -- F.DONOR_WHO_SHARES, --  SHARE table last update 09/2017
    F.DONOR_Q_COMPLETED_DATA_IN_FORM,
    F.DONOR_Q_COMPLETED_DATA_IN_FORM / (select * from TEMPORAL.DONOR_MAX_COMPLETED_DATA_IN_FORM) AS DONOR_RATIO_COMPLETED_DATA_IN_FORM,
    F.DONOR_Q_PHONES,
    -- F.DONOR_OCCUPATION_COMPLETED_IN_FORM, -- Variable wont be able in production
    -- F.DONOR_DISTANCE_TO_NGO_CALCULATED,
    -- F.DONOR_DISTANCE_TO_NGO,
    -- F.DONOR_OCCUPATION_NORMALIZED, -- Variable wont be able in production
    
    --  TARGET
    
    CASE WHEN A.DELETED_AT IS NULL 
             THEN 0 -- NOT CHURNED
         WHEN (A.DELETED_AT > to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')  
         AND A.DELETED_AT < to_timestamp('{snapshot_end_target_period}', 'YYYY-MM-DD hh24:mi:ss')) 
             THEN 1 -- CHURN
             ELSE -1 
         END AS CHURN --  CHURNS DURING OBSERVATION PERIOD: SHOULD BE EXCLUDED IN WHERE CLAUSE
    
    FROM
    	TEMPORAL.Z_BASE_DONATIONS A
    LEFT JOIN 
    	TEMPORAL.Z_BASE_CAMPAIGNS B
    ON A.CAMPAIGN_ID = B.ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_ORGANIZATIONS C
    ON B.ORGANIZATION_ID = C.ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_RATIOS D
    ON A.ID = D.DONATION_ID
    LEFT JOIN
    	TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS E
    	ON A.ID = E.DONATION_ID
    LEFT JOIN
    	TEMPORAL.Z_BASE_DONORS F
    	ON A.DONOR_ID = F.DONOR_ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL G
    	ON B.ID = G.CAMPAIGN_ID
    LEFT JOIN
    	TEMPORAL.Z_BASE_USERS_NGO_LEVEL H
    	ON C.ID = H.ORGANIZATION_ID
    LEFT JOIN
    	TEMPORAL.Z_BASE_SHARES_CAMPAIGN_LEVEL I
    	ON B.ID = I.CAMPAIGN_ID
    LEFT JOIN 
    	CLEANED.TAGS_NGO_LEVEL J
    ON C.ID = J.ORGANIZATION_ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_PAYMENT_DATES K
    ON A.ID = K.DONATION_ID
    LEFT JOIN 
    	CLEANED.IPS_MANY_DONATIONS L
    ON A.IP = L.IP
    LEFT JOIN 
    	TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_MONTHLY M
    ON B.ID = M.CAMPAIGN_ID
    LEFT JOIN
    	TEMPORAL.Z_BASE_Q_DIFFERENT_PAYMENT_METHOD_PER_DONATION N
    ON A.ID = N.DONATION_ID
    LEFT JOIN
    	CLEANED.DONORS_DUPLICATED O
    ON F.DONOR_ID = O.ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_PAYMENT_TRANSACTIONS_REJECTED_PAYMENT_DATES P
    ON A.ID = P.DONATION_ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_CARD_METHOD Q
    ON A.ID = Q.DONATION_ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_AGGREGATES R
    ON B.ID = R.CAMPAIGN_ID
    LEFT JOIN 
    	TEMPORAL.Z_BASE_ANALYTICS_CAT_REFERRAL_TRENDS S
    ON B.ID = S.CAMPAIGN_ID
    WHERE 
    	L.IP IS NULL -- REMOVE DONATIONS FROMS SAME IP
    	AND O.ID IS NULL -- REMOVE DUPLICATED DONATIONS
    	AND A.ENABLE_UNTIL IS NULL -- REMOVE PROGRAMATED CHURNS
    	AND (CASE WHEN A.DELETED_AT IS NULL 
             THEN 0 -- NOT CHURNED
         WHEN (A.DELETED_AT > to_timestamp('{snapshot_end}', 'YYYY-MM-DD hh24:mi:ss')  
         AND A.DELETED_AT < to_timestamp('{snapshot_end_target_period}', 'YYYY-MM-DD hh24:mi:ss')) 
             THEN 1 -- CHURN
             ELSE -1 
         END) != -1; -- EXCLUDE PROGRAMMED CANCELLATIONS
        -- AND E.AMOUNT_APPROVED IS NOT NULL;
        
    ALTER TABLE FOLDS.TRAIN_FOLD_{fold_number} ADD PRIMARY KEY(DONATION_ID);
    DROP SCHEMA IF EXISTS TEMPORAL CASCADE;
    """
    con.execute(query_final)
    
    return
    

