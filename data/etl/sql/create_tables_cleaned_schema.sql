-- THIS IS A QUERY TO CLEAN DATA FROM RAW SCHEMA.

-- CODE DEVELOPED BY MARIA INES ARAN

------------------------------------------------------------------------------------------------------------------------------------ CLEANING ----------------------------------------------------------------------------------------------------------------------------------------------

---- SHARES: IDENTIFIES MULTIPLE SHARES (SOCIAL MEDIA SHARING) PER DONOR. 
DROP TABLE IF EXISTS CLEANED.SHARES;
CREATE TABLE CLEANED.SHARES AS
SELECT
	CONCAT(CAMPAIGN_ID,'-',DONOR_ID) AS CODE,
	A.*
FROM 
	RAW.SHARES A
INNER JOIN 
		(SELECT
			CODE,
			COUNT(*) QUANTITY
		FROM
			(SELECT
		 		CONCAT(CAMPAIGN_ID,'-',DONOR_ID) AS CODE,
		 		B.*
		 	FROM 
		 		RAW.SHARES B) C
		GROUP BY CODE) D
ON CONCAT(A.CAMPAIGN_ID,'-',A.DONOR_ID) = D.CODE
WHERE 
	D.QUANTITY = 1;

ALTER TABLE  CLEANED.SHARES ADD PRIMARY KEY(CAMPAIGN_ID,DONOR_ID);


---- ANALYTICS :  BOTS AND REFERRALS
	---- BOT: SEPATES 'DATA' FIELD AND IDENTIFIES BOTS

DROP TABLE IF EXISTS Z_PREPROCESS_ANALYTICS_;
CREATE TEMPORARY TABLE Z_PREPROCESS_ANALYTICS_ AS
	SELECT
	*,
	SUBSTRING(DATA,POSITION(':ip: 'IN DATA) + 5,POSITION(':user_agent: 'IN DATA) - (POSITION(':ip: 'IN DATA) + 6)) AS IP,
	SUBSTRING(DATA,POSITION(':user_agent: ' IN DATA) + 13,POSITION(':referrer:'IN DATA) - (POSITION(':user_agent: ' IN DATA) + 13 )) AS USER_AGENT,
	SUBSTRING(DATA,POSITION(':country_code:' IN DATA) + 14, 3 ) AS COUNTRY_CODE
FROM 
	RAW.ANALYTICS;

DROP TABLE IF EXISTS Z_PREPROCESS_ANALYTICS__;
CREATE TEMPORARY TABLE Z_PREPROCESS_ANALYTICS__ AS
	SELECT 
		*,
	CASE WHEN USER_AGENT LIKE '%bot%' THEN 1 ELSE 0 END AS BOT
FROM Z_PREPROCESS_ANALYTICS_;

DROP TABLE IF EXISTS CLEANED.ANALYTICS_WITHOUT_BOTS;
CREATE TABLE CLEANED.ANALYTICS_WITHOUT_BOTS AS
SELECT
	*
FROM 
	Z_PREPROCESS_ANALYTICS__
WHERE 
	BOT = 0;

	----REFERRALS: IDENTIFIES THE WEBPAGE FROM WHERE THE DONOR ARRIVED TO THE DONATIONS FORM

DROP TABLE IF EXISTS CLEANED.ANALYTICS_CAT_REFERRAL;
CREATE TABLE CLEANED.ANALYTICS_CAT_REFERRAL AS
SELECT
	A.*,
	C.NAME,
	C.SLUG AS NGO,
	C.WEBSITE AS LINK,
CASE 
	WHEN REFERRAL LIKE '%facebook%' THEN 'FACEBOOK'
	WHEN REFERRAL LIKE '%google%' THEN 'GOOGLE'
	when referral like '%donaronline%' then 'donaronline'
	WHEN REFERRAL IS NULL THEN NULL 
	WHEN REFERRAL = C.WEBSITE THEN 'URL_ONG'
	WHEN REFERRAL LIKE CONCAT('%',C.SLUG,'%') THEN 'URL_ONG'
	WHEN REFERRAL LIKE CONCAT('%',LOWER(REPLACE(NAME,' ','')),'%') THEN 'URL_ONG'
	WHEN REFERRAL LIKE CONCAT('%',SUBSTR(C.WEBSITE,(POSITION('http://www.' IN C.WEBSITE) + 11),POSITION('.org'IN C.WEBSITE)),'%') THEN 'URL_ONG'
	ELSE 'OTRO' 
	END REFERRAL_CATEGORY
FROM 
	 CLEANED.ANALYTICS_WITHOUT_BOTS A
LEFT JOIN 
	RAW.CAMPAIGNS B
ON A.CAMPAIGN_ID = B.ID
LEFT JOIN 
	RAW.ORGANIZATIONS C
ON B.ORGANIZATION_ID = C.ID;


---- IPs: IDENTIFIES MASIVE DONATIONS FROM THE SAME IP ADDRESS
DROP TABLE IF EXISTS CLEANED.IPS_MANY_DONATIONS;
CREATE TABLE CLEANED.IPS_MANY_DONATIONS AS
SELECT
*
FROM
	(SELECT
		IP,
		COUNT(*) QUANTITY
	FROM 
		RAW.DONATIONS
	GROUP BY 
		IP) AA
WHERE QUANTITY > 5 AND IP IS NOT NULL;

ALTER TABLE CLEANED.IPS_MANY_DONATIONS ADD PRIMARY KEY (IP);

-- TAGGING: NGO CATEGORY
DROP TABLE IF EXISTS CLEANED.TAGS_NGO_LEVEL;
CREATE TABLE CLEANED.TAGS_NGO_LEVEL AS
SELECT
	A.ID ORGANIZATION_ID,
	A.NAME NGO,
	COUNT(C.NAME) TAGS_NGO_Q_TAGS,
	SUM(CASE WHEN C.NAME = 'EDUCACION' THEN 1 ELSE 0 END) TAGS_EDUCATION,
	SUM(CASE WHEN C.NAME = 'NINEZ' THEN 1 ELSE 0 END) TAGS_CHILDHOOD,
	SUM(CASE WHEN C.NAME = 'SALUD' THEN 1 ELSE 0 END) TAGS_HEALTH,
	SUM(CASE WHEN C.NAME = 'POBREZA' THEN 1 ELSE 0 END) TAGS_POVERTY,
	SUM(CASE WHEN C.NAME = 'DERECHOS_HUMANOS' THEN 1 ELSE 0 END) TAGS_HUMANRIGHTS,
	SUM(CASE WHEN C.NAME = 'ASOCIACIONES' THEN 1 ELSE 0 END) TAGS_ASSOCIATIONS,
	SUM(CASE WHEN C.NAME = 'VOLUNTARIADO' THEN 1 ELSE 0 END) TAGS_VOLUNTEERING,
	SUM(CASE WHEN C.NAME = 'CAPACIDADES_ESPECIALES' THEN 1 ELSE 0 END) TAGS_DISABLED,
	SUM(CASE WHEN C.NAME = 'ARTE' THEN 1 ELSE 0 END) TAGS_ART,
	SUM(CASE WHEN C.NAME = 'MEDIO_AMBIENTE' THEN 1 ELSE 0 END) TAGS_ENVIRONMENT,
	SUM(CASE WHEN C.NAME = 'EMPLEO' THEN 1 ELSE 0 END) TAGS_EMPLOYMENT,
	SUM(CASE WHEN C.NAME = 'DEPORTES' THEN 1 ELSE 0 END) TAGS_SPORTS,
	SUM(CASE WHEN C.NAME = 'ANIMALES' THEN 1 ELSE 0 END) TAGS_ANIMALS,
	SUM(CASE WHEN C.NAME = 'MICROCREDITOS' THEN 1 ELSE 0 END) TAGS_MICROCREDIT,
	SUM(CASE WHEN C.NAME = 'CIENCIA' THEN 1 ELSE 0 END) TAGS_SCIENCE,
	SUM(CASE WHEN C.NAME = 'RELIGION' THEN 1 ELSE 0 END) TAGS_RELIGION,
	SUM(CASE WHEN C.NAME = 'TECNOLOGIA' THEN 1 ELSE 0 END) TAGS_TECH,
	SUM(CASE WHEN C.NAME = 'COOPERACION' THEN 1 ELSE 0 END) TAGS_COOPERATION,
	SUM(CASE WHEN C.NAME = 'GENERO' THEN 1 ELSE 0 END) TAGS_GENDER,
	SUM(CASE WHEN C.NAME = 'POLITICA' THEN 1 ELSE 0 END) TAGS_POLITICS,
	SUM(CASE WHEN C.NAME = 'VIVIENDA' THEN 1 ELSE 0 END) TAGS_HOME,
	SUM(CASE WHEN C.NAME = 'AGRICULTURA' THEN 1 ELSE 0 END) TAGS_AGRICULTURE,
	SUM(CASE WHEN C.NAME = 'CATASTROFE' THEN 1 ELSE 0 END) TAGS_NATURAL_DISASTERS,
	SUM(CASE WHEN C.NAME = 'JUBILACION' THEN 1 ELSE 0 END) TAGS_ELDERLY
FROM 
	RAW.ORGANIZATIONS A
LEFT JOIN 
	RAW.TAGGINGS B
ON A.ID = B.TAGGABLE_ID
LEFT JOIN 
	RAW.TAGS C
ON C.ID = B.TAG_ID
GROUP BY 
	A.ID, A.NAME;

ALTER TABLE CLEANED.TAGS_NGO_LEVEL  ADD PRIMARY KEY (ORGANIZATION_ID);

---- DONORS: IDENTIFIES DUPLICATED DONORS AND NULL FIELDS 
	-- IDENTIFIES DUPLICATED DONORS
DROP TABLE IF EXISTS CLEANED.DONORS_DUPLICATED;
CREATE TABLE CLEANED.DONORS_DUPLICATED AS	
SELECT 
	*
FROM
	(SELECT
		A.*,
		CASE WHEN A.BIRTHDAY = B.BIRTHDAY AND A.CREATED_AT = B.CREATED_AT THEN 1 ELSE 0 END AS DUPLICATED
	FROM 
		RAW.DONORS A
	LEFT JOIN
			    (SELECT
					*
				FROM
					(SELECT
						BIRTHDAY,
						CREATED_AT,
						COUNT(*) QUANTITY
					FROM
					 	RAW.DONORS
					GROUP BY 
						BIRTHDAY, CREATED_AT
					HAVING COUNT(*) > 1) A
				WHERE BIRTHDAY IS NOT NULL AND QUANTITY > 1 ) B
ON A.BIRTHDAY = B.BIRTHDAY 
AND A.CREATED_AT = B.CREATED_AT) AA
WHERE DUPLICATED = 1;

	---- NULLS
DROP TABLE IF EXISTS CLEANED.DONORS;
	CREATE TABLE  CLEANED.DONORS AS
	SELECT
	ID,
	CASE WHEN STREET_ADDRESS = '  ' THEN NULL ELSE STREET_ADDRESS END AS STREET_ADDRESS,
	CASE WHEN CITY_ADDRESS = '  ' THEN NULL ELSE CITY_ADDRESS END AS CITY_ADDRESS,
	CASE WHEN STATE_ADDRESS = '  ' THEN NULL ELSE STATE_ADDRESS END AS STATE_ADDRESS,
	CASE WHEN ZIPCODE_ADDRESS = '  ' THEN NULL ELSE	ZIPCODE_ADDRESS END AS ZIPCODE_ADDRESS,
	CASE WHEN COUNTRY_ADDRESS = '  ' THEN NULL ELSE COUNTRY_ADDRESS END AS COUNTRY_ADDRESS,
	CASE WHEN OCCUPATION = '  ' THEN NULL ELSE OCCUPATION END AS OCCUPATION,
	GENDER,
	CASE WHEN PHONE = '  ' THEN NULL ELSE PHONE END AS PHONE,
	CASE WHEN CELLPHONE = '  ' THEN NULL ELSE CELLPHONE END AS CELLPHONE,
	BIRTHDAY,
	CREATED_AT,
	UPDATED_AT
FROM
	RAW.DONORS;

ALTER TABLE CLEANED.DONORS ADD PRIMARY KEY (ID);
	
	
-- DISTINCT CARD_METHODS FOR LEVELS IN MODEL
DROP TABLE IF EXISTS CLEANED.CARDS;
	CREATE TABLE  CLEANED.CARDS AS
SELECT
	DISTINCT(CARD_METHOD_ID) CARD
FROM
	RAW.PAYMENT_METHODS;

	













