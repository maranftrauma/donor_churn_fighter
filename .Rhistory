validation$RATIO_Q_ERROR_CODE_86  [is.na(validation$RATIO_Q_ERROR_CODE_86)]<- 0
validation$RATIO_Q_ERROR_CODE_56  [is.na(validation$RATIO_Q_ERROR_CODE_56)]<- 0
validation$RATIO_Q_CARD_CHANGE  [is.na(validation$RATIO_Q_CARD_CHANGE)]<- 0
validation$RATIO_Q_ERROR_CODE_51  [is.na(validation$RATIO_Q_ERROR_CODE_51)]<- 0
validation$RATIO_Q_ERROR_CODE_52  [is.na(validation$RATIO_Q_ERROR_CODE_52)]<- 0
validation$RATIO_Q_ERROR_CODE_91  [is.na(validation$RATIO_Q_ERROR_CODE_91)]<- 0
validation$RATIO_Q_ERROR_CODE_63  [is.na(validation$RATIO_Q_ERROR_CODE_63)]<- 0
validation$RATIO_Q_ERROR_CODE_55  [is.na(validation$RATIO_Q_ERROR_CODE_55)]<- 0
validation$RATIO_Q_ERROR_CODE_006  [is.na(validation$RATIO_Q_ERROR_CODE_006)]<- 0
validation$RATIO_Q_ERROR_CODE_024  [is.na(validation$RATIO_Q_ERROR_CODE_024)]<- 0
validation$RATIO_Q_ERROR_CODE_020  [is.na(validation$RATIO_Q_ERROR_CODE_020)]<- 0
validation$RATIO_Q_ERROR_CODE_54  [is.na(validation$RATIO_Q_ERROR_CODE_54)]<- 0
validation$RATIO_Q_ERROR_CODE_99  [is.na(validation$RATIO_Q_ERROR_CODE_99)]<- 0
validation$RATIO_Q_ERROR_CODE_96  [is.na(validation$RATIO_Q_ERROR_CODE_96)]<- 0
validation$RATIO_Q_ERROR_CODE_50  [is.na(validation$RATIO_Q_ERROR_CODE_50)]<- 0
validation$RATIO_Q_ERROR_CODE_021  [is.na(validation$RATIO_Q_ERROR_CODE_021)]<- 0
validation$RATIO_Q_ERROR_CODE_62  [is.na(validation$RATIO_Q_ERROR_CODE_62)]<- 0
validation$RATIO_Q_ERROR_CODE_66  [is.na(validation$RATIO_Q_ERROR_CODE_66)]<- 0
validation$RATIO_Q_ERROR_CODE_01  [is.na(validation$RATIO_Q_ERROR_CODE_01)]<- 0
validation$RATIO_Q_ERROR_CODE_11  [is.na(validation$RATIO_Q_ERROR_CODE_11)]<- 0
validation$RATIO_Q_ERROR_CODE_081  [is.na(validation$RATIO_Q_ERROR_CODE_081)]<- 0
validation$RATIO_Q_ERROR_CODE_074  [is.na(validation$RATIO_Q_ERROR_CODE_074)]<- 0
validation$RATIO_Q_ERROR_CODE_035  [is.na(validation$RATIO_Q_ERROR_CODE_035)]<- 0
validation$RATIO_Q_ERROR_CODE_15  [is.na(validation$RATIO_Q_ERROR_CODE_15)]<- 0
validation$RATIO_Q_ERROR_CODE_79  [is.na(validation$RATIO_Q_ERROR_CODE_79)]<- 0
validation$RATIO_Q_ERROR_CODE_109  [is.na(validation$RATIO_Q_ERROR_CODE_109)]<- 0
validation$RATIO_Q_ERROR_CODE_008  [is.na(validation$RATIO_Q_ERROR_CODE_008)]<- 0
validation$RATIO_Q_ERROR_CODE_007  [is.na(validation$RATIO_Q_ERROR_CODE_007)]<- 0
validation$RATIO_Q_ERROR_CODE_21  [is.na(validation$RATIO_Q_ERROR_CODE_21)]<- 0
validation$RATIO_Q_ERROR_CODE_041  [is.na(validation$RATIO_Q_ERROR_CODE_041)]<- 0
validation$RATIO_Q_ERROR_CODE_78  [is.na(validation$RATIO_Q_ERROR_CODE_78)]<- 0
validation$RATIO_Q_ERROR_CODE_61  [is.na(validation$RATIO_Q_ERROR_CODE_61)]<- 0
validation$RATIO_Q_ERROR_CODE_07  [is.na(validation$RATIO_Q_ERROR_CODE_07)]<- 0
validation$RATIO_Q_ERROR_CODE_08  [is.na(validation$RATIO_Q_ERROR_CODE_08)]<- 0
validation$RATIO_Q_CC_REJECTED_OTHER_REASON  [is.na(validation$RATIO_Q_CC_REJECTED_OTHER_REASON)]<- 0
validation$RATIO_Q_ACCREDITED  [is.na(validation$RATIO_Q_ACCREDITED)]<- 0
validation$RATIO_Q_ERROR_CODE_033  [is.na(validation$RATIO_Q_ERROR_CODE_033)]<- 0
validation$RATIO_Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE  [is.na(validation$RATIO_Q_CC_REJECTED_BAD_FILLED_SECURITY_CODE)]<- 0
validation$RATIO_Q_ERROR_CODE_60  [is.na(validation$RATIO_Q_ERROR_CODE_60)]<- 0
validation$RATIO_Q_CC_REJECTED_HIGH_RISK  [is.na(validation$RATIO_Q_CC_REJECTED_HIGH_RISK)]<-
validation$RATIO_Q_CC_REJECTED_CALL_FOR_AUTHORIZE  [is.na(validation$RATIO_Q_CC_REJECTED_CALL_FOR_AUTHORIZE)]<- 0
validation$RATIO_Q_ERROR_CODE_064  [is.na(validation$RATIO_Q_ERROR_CODE_064)]<- 0
validation$RATIO_Q_ERROR_CODE_64  [is.na(validation$RATIO_Q_ERROR_CODE_64)]<- 0
validation$RATIO_Q_ERROR_CODE_14  [is.na(validation$RATIO_Q_ERROR_CODE_14)]<- 0
validation$RATIO_Q_CC_REJECTED_INSUFFICIENT_AMOUNT  [is.na(validation$RATIO_Q_CC_REJECTED_INSUFFICIENT_AMOUNT)]<- 0
validation$RATIO_Q_EXPIRED  [is.na(validation$RATIO_Q_EXPIRED)]<- 0
validation$RATIO_Q_SETTLED  [is.na(validation$RATIO_Q_SETTLED)]<- 0
validation$RATIO_Q_ERROR_CODE_015  [is.na(validation$RATIO_Q_ERROR_CODE_015)]<- 0
validation$RATIO_Q_CC_REJECTED_BLACKLIST  [is.na(validation$RATIO_Q_CC_REJECTED_BLACKLIST)]<- 0
validation$RATIO_Q_ERROR_CODE_135  [is.na(validation$RATIO_Q_ERROR_CODE_135)]<- 0
validation$RATIO_Q_PENDING_REVIEW_MANUAL  [is.na(validation$RATIO_Q_PENDING_REVIEW_MANUAL)]<- 0
validation$RATIO_ERROR_Q_IN_PROCESS  [is.na(validation$RATIO_ERROR_Q_IN_PROCESS)]<- 0
validation$RATIO_Q_CC_REJECTED_BAD_FILLED_DATE  [is.na(validation$RATIO_Q_CC_REJECTED_BAD_FILLED_DATE)]<- 0
validation$RATIO_Q_CC_REJECTED_BAD_FILLED_OTHER  [is.na(validation$RATIO_Q_CC_REJECTED_BAD_FILLED_OTHER)]<- 0
validation$RATIO_ERROR_Q_REFUNDED  [is.na(validation$RATIO_ERROR_Q_REFUNDED)]<- 0
validation$RATIO_Q_ERROR_CODE_145  [is.na(validation$RATIO_Q_ERROR_CODE_145)]<- 0
validation$RATIO_Q_ERROR_CODE_85  [is.na(validation$RATIO_Q_ERROR_CODE_85)]<- 0
validation$RATIO_Q_CC_REJECTED_INVALID_INSTALLMENTS  [is.na(validation$RATIO_Q_CC_REJECTED_INVALID_INSTALLMENTS)]<- 0
validation$AVG_PAY_DAY  [is.na(validation$AVG_PAY_DAY)]<- 0
validation$STD_PAY_DAY  [is.na(validation$STD_PAY_DAY)]<- 0
validation$COLLECTED_AMOUNT_PENDING  [is.na(validation$COLLECTED_AMOUNT_PENDING)]<- 0
validation$AMOUNT_APPROVED  [is.na(validation$AMOUNT_APPROVED)]<- 0
validation$AMOUNT_REJECTED  [is.na(validation$AMOUNT_REJECTED)]<- 0
validation$AMOUNT_PENDING  [is.na(validation$AMOUNT_PENDING)]<- 0
validation$AMOUNT_CANCELLED  [is.na(validation$AMOUNT_CANCELLED)]<- 0
validation$AMOUNT_CHARGED_BACK  [is.na(validation$AMOUNT_CHARGED_BACK)]<- 0
validation$AMOUNT_IN_PROCESS  [is.na(validation$AMOUNT_IN_PROCESS)]<- 0
validation$AMOUNT_REFUNDED  [is.na(validation$AMOUNT_REFUNDED)]<- 0
validation$COLLECTED_AMOUNT_APPROVED  [is.na(validation$COLLECTED_AMOUNT_APPROVED)]<- 0
validation$COLLECTED_AMOUNT_REJECTED  [is.na(validation$COLLECTED_AMOUNT_REJECTED)]<- 0
validation$COLLECTED_AMOUNT_CANCELLED  [is.na(validation$COLLECTED_AMOUNT_CANCELLED)]<- 0
validation$COLLECTED_AMOUNT_CHARGED_BACK  [is.na(validation$COLLECTED_AMOUNT_CHARGED_BACK)]<- 0
validation$COLLECTED_AMOUNT_IN_PROCESS  [is.na(validation$COLLECTED_AMOUNT_IN_PROCESS)]<- 0
validation$COLLECTED_AMOUNT_REFUNDED  [is.na(validation$COLLECTED_AMOUNT_REFUNDED)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_T1  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_T1)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_YEAR  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_YEAR)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_SEMESTER  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_SEMESTER)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_QUARTER  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_GOOGLE_DIF_T_AVG_QUARTER)]<- 0
validation$ANALYTICS_CAMP_VIEW_FB_DIF_T_T1  [is.na(validation$ANALYTICS_CAMP_VIEW_FB_DIF_T_T1)]<- 0
validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_T1  [is.na(validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_T1)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_T_AVG_QUARTER  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_T_AVG_QUARTER)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_T_AVG_SEMESTER  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_T_AVG_SEMESTER)]<- 0
validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_YEAR  [is.na(validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_YEAR)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_T_AVG_YEAR  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_T_AVG_YEAR)]<- 0
validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_QUARTER  [is.na(validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_QUARTER)]<- 0
validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_SEMESTER  [is.na(validation$ANALYTICS_CAMP_Q_DONATIONS_DIF_T_AVG_SEMESTER)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_T1  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_T1)]<- 0
validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_T1  [is.na(validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_T1)]<- 0
validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_YEAR  [is.na(validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_YEAR)]<- 0
validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_QUARTER  [is.na(validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_QUARTER)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_SEMESTER  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_SEMESTER)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_QUARTER  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_QUARTER)]<- 0
validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_SEMESTER  [is.na(validation$ANALYTICS_CAMP_Q_DISTINCT_REFERRAL_DIF_T_AVG_SEMESTER)]<- 0
validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_YEAR  [is.na(validation$ANALYTICS_CAMP_VIEW_DIF_NULL_DIF_T_AVG_YEAR)]<- 0
validation$DONOR_VERSION_LAST_UPDATE  [is.na(validation$DONOR_VERSION_LAST_UPDATE)]<- 0
validation$ORGANIZATION_ID  [is.na(validation$ORGANIZATION_ID)]<- 0
# Validation to test
test <- validation
# Add Levels to DONATION_LAST_PAYMENT_METHOD_USED considering all possible Cards
levels(test$DONATION_LAST_PAYMENT_METHOD_USED) <- df_cards$CARD
# Define target to evaluate model performance
y <- test$CHURN
as.data.frame(table(test$CHURN))
## RANDOM FOREST
# Only complete cases
train.complete <- na.omit(train)
train.complete$TENURE <- NULL
train$CHURN <- as.numeric(train$CHURN)
rf_model <- randomForest(CHURN ~ .,
mtry = 186,
ntree = 500,
nodesize = 4,
data = train.complete,
importance = TRUE,
replaces = TRUE)
# Print model
rf_model
require("httr")
require("jsonlite")
call1 <- paste(base)
base <- "https://data.gov.au/data/api/3/action/datastore_search_sql?sql=SELECT%20*%20from%20%225b950737-0ae6-40f7-b623-eca11e7c2a2a%22"
endpoint <- "prices"
stock <- "AAPL"
call1 <- paste(base)
get_prices <- GET(call1)
get_prices_json <- fromJSON(get_prices, flatten = TRUE)
get_prices
get_prices_json
get_prices_json <- fromJSON(get_prices$headers, flatten = TRUE)
get_prices$headers
get_prices_json <- fromJSON(get_prices$headers$date, flatten = TRUE)
get_prices_text <- content(get_prices,"text")
get_prices_json <- fromJSON(get_prices_text, flatten = TRUE)
get_prices_json
get_prices_df <- as.data.frame(get_prices_json)
View(get_prices_df)
get_prices_df <- as.data.frame(get_prices_json)
# libraries
library(caret, quietly = true)
library(glmnet, quietly = true)
library(rms, quietly = true)
library(risksetroc, quietly = true)
library(doparallel, quietly = true)
library(rpostgresql)
library(vim)
library(dplyr)
library(purrr)
library(dmwr)
library(tidyr)
library(pec)
library(plyr)
library(rose)
library(informationvalue)
library(mlmetrics)
library(proc)
# libraries
library(caret, quietly = true)
library(glmnet, quietly = true)
library(rms, quietly = true)
library(risksetroc, quietly = true)
library(doparallel, quietly = true)
library(rpostgresql)
library(vim)
library(dplyr)
library(purrr)
library(dmwr)
library(tidyr)
library(pec)
library(plyr)
library(rose)
library(informationvalue)
library(mlmetrics)
library(caret, quietly = true)
library(glmnet, quietly = true)
# libraries
library(caret)
library(glmnet)
library(rms)
library(risksetroc)
library(doparallel)
library(rpostgresql)
library(caret)
library(tidyr)
library(doparallel)
# LIBRARIES AND CONFIGURATION
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
# config
options(scipen=999)
# Parallel
registerDoParallel(detectCores() - 2 )  ## registerDoMC( detectCores()-1 ) in Linux
detectCores()
options(rf.cores = detectCores() - 2,
mc.cores = detectCores() - 2)  ## Cores for parallel processing
#setwd(file.path(getwd(), "Wingu", "donaronline"))
work_dir <- "/Users/mac/Documents/Wingu/donaronline/trabajo_final_boosteado/churn_donations"
setwd(work_dir)
#####################################################################################################################################
## IMPORT PREPROCES
source(here("data", "etl","preprocess.R"))
setwd(work_dir)
here()
#####################################################################################################################################
## IMPORT PREPROCES
source(here("Wingu","donaronline","trabajo_final_boosteado","churn_donations","data", "etl","preprocess.R"))
getwd()
source(here("data", "etl","preprocess.R"))
here("data", "etl","preprocess.R")
setwd(here("Wingu","donaronline","trabajo_final_boosteado","churn_donations"))
source(here("data", "etl","preprocess.R"))
source(here("data", "etl","preprocess.R"), chdir = T)
source("/Users/mac/Documents/Wingu/donaronline/trabajo_final_boosteado/churn_donations/data/etl/preprocess.R")
source("/Users/mac/Documents/Wingu/donaronline/trabajo_final_boosteado/churn_donations/data/etl/preprocess.R")
# LIBRARIES AND CONFIGURATION
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
# config
options(scipen=999)
# Parallel
registerDoParallel(detectCores() - 2 )  ## registerDoMC( detectCores()-1 ) in Linux
detectCores()
options(rf.cores = detectCores() - 2,
mc.cores = detectCores() - 2)  ## Cores for parallel processing
#setwd(file.path(getwd(), "Wingu", "donaronline"))
work_dir <- "/Users/mac/Documents/Wingu/donaronline/trabajo_final_boosteado/churn_donations"
setwd(work_dir)
setwd(here("Wingu","donaronline","trabajo_final_boosteado","churn_donations"))
#####################################################################################################################################
## IMPORT PREPROCES
source(here("data", "etl","preprocess.R"))
gc()
# LIBRARIES AND CONFIGURATION
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
# config
options(scipen=999)
# Parallel
registerDoParallel(detectCores() - 2 )  ## registerDoMC( detectCores()-1 ) in Linux
detectCores()
options(rf.cores = detectCores() - 2,
mc.cores = detectCores() - 2)  ## Cores for parallel processing
#setwd(file.path(getwd(), "Wingu", "donaronline"))
#work_dir <- "/Users/mac/Documents/Wingu/donaronline/trabajo_final_boosteado/churn_donations"
#setwd(work_dir)
setwd(here("Wingu","donaronline","trabajo_final_boosteado","churn_donations"))
source(here("data", "etl","preprocess.R"))
gc()
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
# config
options(scipen=999)
# Parallel
registerDoParallel(detectCores() - 2 )  ## registerDoMC( detectCores()-1 ) in Linux
detectCores()
options(rf.cores = detectCores() - 2,
mc.cores = detectCores() - 2)  ## Cores for parallel processing
#setwd(file.path(getwd(), "Wingu", "donaronline"))
#work_dir <- "/Users/mac/Documents/Wingu/donaronline/trabajo_final_boosteado/churn_donations"
#setwd(work_dir)
setwd(here("Wingu","donaronline","trabajo_final_boosteado","churn_donations"))
#####################################################################################################################################
## IMPORT PREPROCES
source(here("data", "etl","preprocess.R"))
gc()
# This is code to develop a random survival model forest to predict donors churn
# Code developed by Maria Ines Aran.
#####################################################################################################################################
# LIBRARIES AND CONFIGURATION
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
here()
gc()
#####################################################################################################################################
# LIBRARIES AND CONFIGURATION
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
# config
options(scipen=999)
# Parallel
registerDoParallel(detectCores() - 2 )  ## registerDoMC( detectCores()-1 ) in Linux
detectCores()
options(rf.cores = detectCores() - 2,
mc.cores = detectCores() - 2)  ## Cores for parallel processing
#setwd(file.path(getwd(), "Wingu", "donaronline"))
#work_dir <- "/Users/mac/Documents/Wingu/donaronline/trabajo_final_boosteado/churn_donations"
#setwd(work_dir)
#setwd(here("Wingu","donaronline","trabajo_final_boosteado","churn_donations"))
here()
dr_here()
set_here()
gc()
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
# config
options(scipen=999)
# Parallel
registerDoParallel(detectCores() - 2 )  ## registerDoMC( detectCores()-1 ) in Linux
detectCores()
options(rf.cores = detectCores() - 2,
mc.cores = detectCores() - 2)  ## Cores for parallel processing
source(here("data", "etl","preprocess.R"))
source(here("data", "etl","preprocess.R"))
gc()
# This is code to develop a random survival model forest to predict donors churn
# Code developed by Maria Ines Aran.
#####################################################################################################################################
# LIBRARIES AND CONFIGURATION
# Libraries
library(survival, quietly = TRUE)
library(caret, quietly = TRUE)
library(glmnet, quietly = TRUE)
library(rms, quietly = TRUE)
library(risksetROC, quietly = TRUE)
library(doParallel, quietly = TRUE)
library(randomForestSRC)
library(randomForest)
library(ggRandomForests)
library(RPostgreSQL)
library(VIM)
library(dplyr)
library(purrr)
library(DMwR)
library(tidyr)
library(pec)
library(plyr)
library(ROSE)
library(survminer)
library(survAUC)
library(InformationValue)
library(MLmetrics)
library(pROC)
library(here)
# config
options(scipen=999)
# Parallel
registerDoParallel(detectCores() - 2 )  ## registerDoMC( detectCores()-1 ) in Linux
detectCores()
options(rf.cores = detectCores() - 2,
mc.cores = detectCores() - 2)  ## Cores for parallel processing
here()
set_here()
dr_herE()
dr_here()
here()
here()
gc()
set_here()
herE()
here()
library(here)
here()
